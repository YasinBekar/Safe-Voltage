
IMATEK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fbc  08002fbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fbc  08002fbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08002fd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002fd0  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042a6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011de  00000000  00000000  000242da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  000254b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e8  00000000  00000000  00025948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea79  00000000  00000000  00025d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000063e9  00000000  00000000  000347a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057a08  00000000  00000000  0003ab92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009259a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e84  00000000  00000000  000925ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002efc 	.word	0x08002efc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002efc 	.word	0x08002efc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fb0b 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f907 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f9a7 	bl	8000754 <MX_GPIO_Init>
  MX_ADC_Init();
 8000406:	f000 f949 	bl	800069c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  adc_oku();
 800040a:	f000 fa2b 	bl	8000864 <adc_oku>





	  	  	  if(z == 0)
 800040e:	4b77      	ldr	r3, [pc, #476]	; (80005ec <main+0x1f8>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d105      	bne.n	8000422 <main+0x2e>
	  	  	  {
  	  			  HAL_Delay(100);
 8000416:	2064      	movs	r0, #100	; 0x64
 8000418:	f000 fb60 	bl	8000adc <HAL_Delay>
	  	  		  z=1;
 800041c:	4b73      	ldr	r3, [pc, #460]	; (80005ec <main+0x1f8>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
	  	  	  }




	  	  	 if(0 == Ust_deger_butonu)
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2110      	movs	r1, #16
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f8b9 	bl	80015a0 <HAL_GPIO_ReadPin>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d107      	bne.n	8000442 <main+0x4e>
	  	  		        {

	  	  		        	u++;
 8000432:	4b6f      	ldr	r3, [pc, #444]	; (80005f0 <main+0x1fc>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	1c5a      	adds	r2, r3, #1
 8000438:	4b6d      	ldr	r3, [pc, #436]	; (80005f0 <main+0x1fc>)
 800043a:	601a      	str	r2, [r3, #0]
	  	  		        	HAL_Delay(200);
 800043c:	20c8      	movs	r0, #200	; 0xc8
 800043e:	f000 fb4d 	bl	8000adc <HAL_Delay>
	  	  		        }

	  	     if(0 == alt_deger_butonu)
 8000442:	2390      	movs	r3, #144	; 0x90
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	2108      	movs	r1, #8
 8000448:	0018      	movs	r0, r3
 800044a:	f001 f8a9 	bl	80015a0 <HAL_GPIO_ReadPin>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d107      	bne.n	8000462 <main+0x6e>
	  	  	  	  	    {
	  	    	 	 	 	a++;
 8000452:	4b68      	ldr	r3, [pc, #416]	; (80005f4 <main+0x200>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	4b66      	ldr	r3, [pc, #408]	; (80005f4 <main+0x200>)
 800045a:	601a      	str	r2, [r3, #0]
	  	    	 	 	 	HAL_Delay(200);
 800045c:	20c8      	movs	r0, #200	; 0xc8
 800045e:	f000 fb3d 	bl	8000adc <HAL_Delay>



	  	     //alt deger ayarları

	  	    if( ((a % 2) == 0) && ((u % 2) == 0) )
 8000462:	4b64      	ldr	r3, [pc, #400]	; (80005f4 <main+0x200>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	001a      	movs	r2, r3
 8000468:	2301      	movs	r3, #1
 800046a:	4013      	ands	r3, r2
 800046c:	d141      	bne.n	80004f2 <main+0xfe>
 800046e:	4b60      	ldr	r3, [pc, #384]	; (80005f0 <main+0x1fc>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	001a      	movs	r2, r3
 8000474:	2301      	movs	r3, #1
 8000476:	4013      	ands	r3, r2
 8000478:	d13b      	bne.n	80004f2 <main+0xfe>
	  	    {


	  	    	 adc_oku();
 800047a:	f000 f9f3 	bl	8000864 <adc_oku>

	  	    	for(int count = 0 ; count<500 ; count++ )
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	e007      	b.n	8000494 <main+0xa0>
	  	    	{

	  	    		 Disp(yeniAdcDeger);
 8000484:	4b5c      	ldr	r3, [pc, #368]	; (80005f8 <main+0x204>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fd49 	bl	8001f20 <Disp>
	  	    	for(int count = 0 ; count<500 ; count++ )
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3301      	adds	r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	23fa      	movs	r3, #250	; 0xfa
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	429a      	cmp	r2, r3
 800049c:	dbf2      	blt.n	8000484 <main+0x90>
	  	    	// adc_oku();
	  	    	//	Disp(yeniAdcDeger);



	  	    	if((a == 0) || (a == 1))
 800049e:	4b55      	ldr	r3, [pc, #340]	; (80005f4 <main+0x200>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d003      	beq.n	80004ae <main+0xba>
 80004a6:	4b53      	ldr	r3, [pc, #332]	; (80005f4 <main+0x200>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d104      	bne.n	80004b8 <main+0xc4>
		        {
	  	    		altdeger=yeniAdcDeger;
 80004ae:	4b52      	ldr	r3, [pc, #328]	; (80005f8 <main+0x204>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	001a      	movs	r2, r3
 80004b4:	4b51      	ldr	r3, [pc, #324]	; (80005fc <main+0x208>)
 80004b6:	601a      	str	r2, [r3, #0]
	  	    	}

	  	    	if(a>0)
 80004b8:	4b4e      	ldr	r3, [pc, #312]	; (80005f4 <main+0x200>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dd03      	ble.n	80004c8 <main+0xd4>
	  	    	{

	  	    		altdeger=altsetdeger;
 80004c0:	4b4f      	ldr	r3, [pc, #316]	; (8000600 <main+0x20c>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b4d      	ldr	r3, [pc, #308]	; (80005fc <main+0x208>)
 80004c6:	601a      	str	r2, [r3, #0]
	  	    	}



	  	    	if((u == 0) || (u == 1))
 80004c8:	4b49      	ldr	r3, [pc, #292]	; (80005f0 <main+0x1fc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <main+0xe4>
 80004d0:	4b47      	ldr	r3, [pc, #284]	; (80005f0 <main+0x1fc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d104      	bne.n	80004e2 <main+0xee>
			        {
		  	    		ustdeger=yeniAdcDeger;
 80004d8:	4b47      	ldr	r3, [pc, #284]	; (80005f8 <main+0x204>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	001a      	movs	r2, r3
 80004de:	4b49      	ldr	r3, [pc, #292]	; (8000604 <main+0x210>)
 80004e0:	601a      	str	r2, [r3, #0]
		  	    	}

		  	    	if(u>0)
 80004e2:	4b43      	ldr	r3, [pc, #268]	; (80005f0 <main+0x1fc>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dd03      	ble.n	80004f2 <main+0xfe>
		  	    	{

		  	    		ustdeger=ustsetdeger;
 80004ea:	4b47      	ldr	r3, [pc, #284]	; (8000608 <main+0x214>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b45      	ldr	r3, [pc, #276]	; (8000604 <main+0x210>)
 80004f0:	601a      	str	r2, [r3, #0]


	  	    }


	        if( !(a % 2 == 0) )
 80004f2:	4b40      	ldr	r3, [pc, #256]	; (80005f4 <main+0x200>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	001a      	movs	r2, r3
 80004f8:	2301      	movs	r3, #1
 80004fa:	4013      	ands	r3, r2
 80004fc:	d028      	beq.n	8000550 <main+0x15c>
	        {

	        	if(0 == yukselt_butonu)
 80004fe:	2390      	movs	r3, #144	; 0x90
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	0018      	movs	r0, r3
 8000506:	f001 f84b 	bl	80015a0 <HAL_GPIO_ReadPin>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d107      	bne.n	800051e <main+0x12a>
	        	{
	        		HAL_Delay(200);
 800050e:	20c8      	movs	r0, #200	; 0xc8
 8000510:	f000 fae4 	bl	8000adc <HAL_Delay>
	        		altdeger++;
 8000514:	4b39      	ldr	r3, [pc, #228]	; (80005fc <main+0x208>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	4b38      	ldr	r3, [pc, #224]	; (80005fc <main+0x208>)
 800051c:	601a      	str	r2, [r3, #0]
	        	}

	        	if(0 == azalt_butonu)
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2120      	movs	r1, #32
 8000524:	0018      	movs	r0, r3
 8000526:	f001 f83b 	bl	80015a0 <HAL_GPIO_ReadPin>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d107      	bne.n	800053e <main+0x14a>
	        	{
	        		HAL_Delay(200);
 800052e:	20c8      	movs	r0, #200	; 0xc8
 8000530:	f000 fad4 	bl	8000adc <HAL_Delay>
	        		altdeger--;
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <main+0x208>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	4b30      	ldr	r3, [pc, #192]	; (80005fc <main+0x208>)
 800053c:	601a      	str	r2, [r3, #0]
	        	}

	        	altsetdeger=altdeger;
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <main+0x208>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <main+0x20c>)
 8000544:	601a      	str	r2, [r3, #0]
	        	Disp(altsetdeger);
 8000546:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <main+0x20c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fce8 	bl	8001f20 <Disp>

	        }



	        if( !(u % 2 == 0) )
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <main+0x1fc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	001a      	movs	r2, r3
 8000556:	2301      	movs	r3, #1
 8000558:	4013      	ands	r3, r2
 800055a:	d028      	beq.n	80005ae <main+0x1ba>
	        {


	        	if(0 == yukselt_butonu)
 800055c:	2390      	movs	r3, #144	; 0x90
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f81c 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d107      	bne.n	800057c <main+0x188>
	        	{
	        		HAL_Delay(200);
 800056c:	20c8      	movs	r0, #200	; 0xc8
 800056e:	f000 fab5 	bl	8000adc <HAL_Delay>
	        		ustdeger++;
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <main+0x210>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <main+0x210>)
 800057a:	601a      	str	r2, [r3, #0]
	        	}

	        	if(0 == azalt_butonu)
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f80c 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d107      	bne.n	800059c <main+0x1a8>
	        	{
	        		HAL_Delay(200);
 800058c:	20c8      	movs	r0, #200	; 0xc8
 800058e:	f000 faa5 	bl	8000adc <HAL_Delay>
	        		ustdeger--;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <main+0x210>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <main+0x210>)
 800059a:	601a      	str	r2, [r3, #0]
	        	}

	        	ustsetdeger=ustdeger;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <main+0x210>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <main+0x214>)
 80005a2:	601a      	str	r2, [r3, #0]
	        	Disp(ustsetdeger);
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0x214>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fcb9 	bl	8001f20 <Disp>





	        if((yeniAdcDeger <= ustsetdeger ) && (yeniAdcDeger >= altsetdeger ) )
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <main+0x204>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	001a      	movs	r2, r3
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <main+0x214>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	dc0e      	bgt.n	80005da <main+0x1e6>
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0x204>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	001a      	movs	r2, r3
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <main+0x20c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	db07      	blt.n	80005da <main+0x1e6>
	        {
	        	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0x218>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	0019      	movs	r1, r3
 80005d4:	f001 f801 	bl	80015da <HAL_GPIO_WritePin>
 80005d8:	e006      	b.n	80005e8 <main+0x1f4>

	        }

	        else
	        {
	        	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	011b      	lsls	r3, r3, #4
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <main+0x218>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	0019      	movs	r1, r3
 80005e4:	f000 fff9 	bl	80015da <HAL_GPIO_WritePin>
	  	  	  if(z == 0)
 80005e8:	e711      	b.n	800040e <main+0x1a>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000084 	.word	0x20000084
 80005f0:	20000070 	.word	0x20000070
 80005f4:	2000006c 	.word	0x2000006c
 80005f8:	2000006a 	.word	0x2000006a
 80005fc:	20000078 	.word	0x20000078
 8000600:	2000007c 	.word	0x2000007c
 8000604:	20000074 	.word	0x20000074
 8000608:	20000080 	.word	0x20000080
 800060c:	48000400 	.word	0x48000400

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b091      	sub	sp, #68	; 0x44
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	2410      	movs	r4, #16
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2330      	movs	r3, #48	; 0x30
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f002 fc63 	bl	8002eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2310      	movs	r3, #16
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f002 fc5c 	bl	8002eec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000634:	0021      	movs	r1, r4
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2212      	movs	r2, #18
 800063a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2210      	movs	r2, #16
 800064c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2210      	movs	r2, #16
 8000652:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	187b      	adds	r3, r7, r1
 800065c:	0018      	movs	r0, r3
 800065e:	f000 ffd9 	bl	8001614 <HAL_RCC_OscConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000666:	f000 f91f 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	003b      	movs	r3, r7
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	003b      	movs	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	003b      	movs	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	003b      	movs	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000682:	003b      	movs	r3, r7
 8000684:	2100      	movs	r1, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fade 	bl	8001c48 <HAL_RCC_ClockConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000690:	f000 f90a 	bl	80008a8 <Error_Handler>
  }
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b011      	add	sp, #68	; 0x44
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	230c      	movs	r3, #12
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fc1e 	bl	8002eec <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_ADC_Init+0xb0>)
 80006b2:	4a27      	ldr	r2, [pc, #156]	; (8000750 <MX_ADC_Init+0xb4>)
 80006b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <MX_ADC_Init+0xb0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_ADC_Init+0xb0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_ADC_Init+0xb0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_ADC_Init+0xb0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC_Init+0xb0>)
 80006d0:	2204      	movs	r2, #4
 80006d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC_Init+0xb0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC_Init+0xb0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC_Init+0xb0>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC_Init+0xb0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC_Init+0xb0>)
 80006ee:	22c2      	movs	r2, #194	; 0xc2
 80006f0:	32ff      	adds	r2, #255	; 0xff
 80006f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC_Init+0xb0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC_Init+0xb0>)
 80006fc:	2224      	movs	r2, #36	; 0x24
 80006fe:	2100      	movs	r1, #0
 8000700:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC_Init+0xb0>)
 8000704:	2201      	movs	r2, #1
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ADC_Init+0xb0>)
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fa0a 	bl	8000b24 <HAL_ADC_Init>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 f8c8 	bl	80008a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	0152      	lsls	r2, r2, #5
 8000724:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0552      	lsls	r2, r2, #21
 800072c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800072e:	1d3a      	adds	r2, r7, #4
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_ADC_Init+0xb0>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fb95 	bl	8000e64 <HAL_ADC_ConfigChannel>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800073e:	f000 f8b3 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b004      	add	sp, #16
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000028 	.word	0x20000028
 8000750:	40012400 	.word	0x40012400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	240c      	movs	r4, #12
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	2314      	movs	r3, #20
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f002 fbc1 	bl	8002eec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <MX_GPIO_Init+0x104>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <MX_GPIO_Init+0x104>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0x104>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <MX_GPIO_Init+0x104>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_GPIO_Init+0x104>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	02c9      	lsls	r1, r1, #11
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <MX_GPIO_Init+0x104>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	02db      	lsls	r3, r3, #11
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|REL_Pin|A_Pin|B_Pin
 80007a2:	492e      	ldr	r1, [pc, #184]	; (800085c <MX_GPIO_Init+0x108>)
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_GPIO_Init+0x10c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 ff16 	bl	80015da <HAL_GPIO_WritePin>
                          |C_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Yuzler_Pin|Onlar_Pin|Birler_Pin, GPIO_PIN_RESET);
 80007ae:	23e0      	movs	r3, #224	; 0xe0
 80007b0:	0119      	lsls	r1, r3, #4
 80007b2:	2390      	movs	r3, #144	; 0x90
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	2200      	movs	r2, #0
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 ff0e 	bl	80015da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTON1_Pin BUTON2_Pin BUTON3_Pin BUTON4_Pin
                           BUTON5_Pin */
  GPIO_InitStruct.Pin = BUTON1_Pin|BUTON2_Pin|BUTON3_Pin|BUTON4_Pin
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	22f8      	movs	r2, #248	; 0xf8
 80007c2:	601a      	str	r2, [r3, #0]
                          |BUTON5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	193a      	adds	r2, r7, r4
 80007d2:	2390      	movs	r3, #144	; 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fd71 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin REL_Pin A_Pin B_Pin
                           C_Pin D_Pin E_Pin F_Pin
                           G_Pin */
  GPIO_InitStruct.Pin = LED_Pin|REL_Pin|A_Pin|B_Pin
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_GPIO_Init+0x108>)
 80007e2:	601a      	str	r2, [r3, #0]
                          |C_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <MX_GPIO_Init+0x10c>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	0010      	movs	r0, r2
 80007fe:	f000 fd5f 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASENS_Pin VSENS_Pin */
  GPIO_InitStruct.Pin = ASENS_Pin|VSENS_Pin;
 8000802:	0021      	movs	r1, r4
 8000804:	187b      	adds	r3, r7, r1
 8000806:	22c0      	movs	r2, #192	; 0xc0
 8000808:	01d2      	lsls	r2, r2, #7
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	000c      	movs	r4, r1
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2203      	movs	r2, #3
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	193b      	adds	r3, r7, r4
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <MX_GPIO_Init+0x10c>)
 800081e:	0019      	movs	r1, r3
 8000820:	0010      	movs	r0, r2
 8000822:	f000 fd4d 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Yuzler_Pin Onlar_Pin Birler_Pin */
  GPIO_InitStruct.Pin = Yuzler_Pin|Onlar_Pin|Birler_Pin;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	22e0      	movs	r2, #224	; 0xe0
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2201      	movs	r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	187a      	adds	r2, r7, r1
 8000844:	2390      	movs	r3, #144	; 0x90
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fd38 	bl	80012c0 <HAL_GPIO_Init>

}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b009      	add	sp, #36	; 0x24
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	00008bf8 	.word	0x00008bf8
 8000860:	48000400 	.word	0x48000400

08000864 <adc_oku>:

/* USER CODE BEGIN 4 */
adc_oku(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

				HAL_ADC_Start(&hadc);
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <adc_oku+0x38>)
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fa9a 	bl	8000da4 <HAL_ADC_Start>
		  	    adcDeger = HAL_ADC_GetValue(&hadc);
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <adc_oku+0x38>)
 8000872:	0018      	movs	r0, r3
 8000874:	f000 faea 	bl	8000e4c <HAL_ADC_GetValue>
 8000878:	0003      	movs	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <adc_oku+0x3c>)
 800087e:	801a      	strh	r2, [r3, #0]
		  	    yeniAdcDeger=adcDeger/10;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <adc_oku+0x3c>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	210a      	movs	r1, #10
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff fc3e 	bl	8000108 <__udivsi3>
 800088c:	0003      	movs	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <adc_oku+0x40>)
 8000892:	801a      	strh	r2, [r3, #0]


}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000028 	.word	0x20000028
 80008a0:	20000068 	.word	0x20000068
 80008a4:	2000006a 	.word	0x2000006a

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	619a      	str	r2, [r3, #24]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	69da      	ldr	r2, [r3, #28]
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0549      	lsls	r1, r1, #21
 80008dc:	430a      	orrs	r2, r1
 80008de:	61da      	str	r2, [r3, #28]
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_MspInit+0x44>)
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	055b      	lsls	r3, r3, #21
 80008e8:	4013      	ands	r3, r2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08b      	sub	sp, #44	; 0x2c
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	2414      	movs	r4, #20
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	2314      	movs	r3, #20
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f002 faec 	bl	8002eec <memset>
  if(hadc->Instance==ADC1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	; (8000980 <HAL_ADC_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12b      	bne.n	8000976 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_ADC_MspInit+0x88>)
 8000920:	699a      	ldr	r2, [r3, #24]
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_ADC_MspInit+0x88>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0089      	lsls	r1, r1, #2
 8000928:	430a      	orrs	r2, r1
 800092a:	619a      	str	r2, [r3, #24]
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_ADC_MspInit+0x88>)
 800092e:	699a      	ldr	r2, [r3, #24]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_ADC_MspInit+0x88>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_ADC_MspInit+0x88>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0289      	lsls	r1, r1, #10
 8000944:	430a      	orrs	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_ADC_MspInit+0x88>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	029b      	lsls	r3, r3, #10
 8000950:	4013      	ands	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC1_IN0_Pin;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2203      	movs	r2, #3
 8000960:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN0_GPIO_Port, &GPIO_InitStruct);
 8000968:	193a      	adds	r2, r7, r4
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fca5 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b00b      	add	sp, #44	; 0x2c
 800097c:	bd90      	pop	{r4, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40012400 	.word	0x40012400
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f87a 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490e      	ldr	r1, [pc, #56]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0b      	ldr	r4, [pc, #44]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ea:	f7ff ffe4 	bl	80009b6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ee:	f002 fa59 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fcff 	bl	80003f4 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a04:	08002fc4 	.word	0x08002fc4
  ldr r2, =_sbss
 8000a08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a0c:	2000008c 	.word	0x2000008c

08000a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_IRQHandler>
	...

08000a14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_Init+0x24>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_Init+0x24>)
 8000a1e:	2110      	movs	r1, #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f809 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2a:	f7ff ff43 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_InitTick+0x5c>)
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_InitTick+0x60>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	23fa      	movs	r3, #250	; 0xfa
 8000a50:	0098      	lsls	r0, r3, #2
 8000a52:	f7ff fb59 	bl	8000108 <__udivsi3>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f7ff fb54 	bl	8000108 <__udivsi3>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fc1f 	bl	80012a6 <HAL_SYSTICK_Config>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e00f      	b.n	8000a90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d80b      	bhi.n	8000a8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	2301      	movs	r3, #1
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 fbfc 	bl	800127c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_InitTick+0x64>)
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b003      	add	sp, #12
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	001a      	movs	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	18d2      	adds	r2, r2, r3
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab6:	601a      	str	r2, [r3, #0]
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000088 	.word	0x20000088

08000ac8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_GetTick+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000088 	.word	0x20000088

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fff0 	bl	8000ac8 <HAL_GetTick>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	001a      	movs	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	189b      	adds	r3, r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	f7ff ffe0 	bl	8000ac8 <HAL_GetTick>
 8000b08:	0002      	movs	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b004      	add	sp, #16
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e125      	b.n	8000d8e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10a      	bne.n	8000b60 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2234      	movs	r2, #52	; 0x34
 8000b54:	2100      	movs	r1, #0
 8000b56:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff fece 	bl	80008fc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b64:	2210      	movs	r2, #16
 8000b66:	4013      	ands	r3, r2
 8000b68:	d000      	beq.n	8000b6c <HAL_ADC_Init+0x48>
 8000b6a:	e103      	b.n	8000d74 <HAL_ADC_Init+0x250>
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d000      	beq.n	8000b78 <HAL_ADC_Init+0x54>
 8000b76:	e0fd      	b.n	8000d74 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b82:	d000      	beq.n	8000b86 <HAL_ADC_Init+0x62>
 8000b84:	e0f6      	b.n	8000d74 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8a:	4a83      	ldr	r2, [pc, #524]	; (8000d98 <HAL_ADC_Init+0x274>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	2202      	movs	r2, #2
 8000b90:	431a      	orrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d112      	bne.n	8000bca <HAL_ADC_Init+0xa6>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d009      	beq.n	8000bc6 <HAL_ADC_Init+0xa2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d101      	bne.n	8000bca <HAL_ADC_Init+0xa6>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <HAL_ADC_Init+0xa8>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d116      	bne.n	8000bfe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	2218      	movs	r2, #24
 8000bd8:	4393      	bics	r3, r2
 8000bda:	0019      	movs	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	0899      	lsrs	r1, r3, #2
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4964      	ldr	r1, [pc, #400]	; (8000d9c <HAL_ADC_Init+0x278>)
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7e1b      	ldrb	r3, [r3, #24]
 8000c12:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7e5b      	ldrb	r3, [r3, #25]
 8000c18:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7e9b      	ldrb	r3, [r3, #26]
 8000c20:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c22:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d002      	beq.n	8000c32 <HAL_ADC_Init+0x10e>
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	e000      	b.n	8000c34 <HAL_ADC_Init+0x110>
 8000c32:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c34:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c3a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d101      	bne.n	8000c48 <HAL_ADC_Init+0x124>
 8000c44:	2304      	movs	r3, #4
 8000c46:	e000      	b.n	8000c4a <HAL_ADC_Init+0x126>
 8000c48:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2124      	movs	r1, #36	; 0x24
 8000c50:	5c5b      	ldrb	r3, [r3, r1]
 8000c52:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c54:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7edb      	ldrb	r3, [r3, #27]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d115      	bne.n	8000c90 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7e9b      	ldrb	r3, [r3, #26]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0252      	lsls	r2, r2, #9
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	e00b      	b.n	8000c90 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69da      	ldr	r2, [r3, #28]
 8000c94:	23c2      	movs	r3, #194	; 0xc2
 8000c96:	33ff      	adds	r3, #255	; 0xff
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d007      	beq.n	8000cac <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68d9      	ldr	r1, [r3, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	055b      	lsls	r3, r3, #21
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d01b      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d017      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d013      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d00f      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d00b      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	2b05      	cmp	r3, #5
 8000cee:	d007      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d003      	beq.n	8000d00 <HAL_ADC_Init+0x1dc>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	d112      	bne.n	8000d26 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	695a      	ldr	r2, [r3, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6959      	ldr	r1, [r3, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	2207      	movs	r2, #7
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_ADC_Init+0x27c>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d10b      	bne.n	8000d4e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d40:	2203      	movs	r2, #3
 8000d42:	4393      	bics	r3, r2
 8000d44:	2201      	movs	r2, #1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d4c:	e01c      	b.n	8000d88 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d52:	2212      	movs	r2, #18
 8000d54:	4393      	bics	r3, r2
 8000d56:	2210      	movs	r2, #16
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	2201      	movs	r2, #1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d72:	e009      	b.n	8000d88 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d78:	2210      	movs	r2, #16
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	fffffefd 	.word	0xfffffefd
 8000d9c:	fffe0219 	.word	0xfffe0219
 8000da0:	833fffe7 	.word	0x833fffe7

08000da4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2204      	movs	r2, #4
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d138      	bne.n	8000e32 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2234      	movs	r2, #52	; 0x34
 8000dc4:	5c9b      	ldrb	r3, [r3, r2]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Start+0x2a>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e038      	b.n	8000e40 <HAL_ADC_Start+0x9c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2234      	movs	r2, #52	; 0x34
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7e5b      	ldrb	r3, [r3, #25]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d007      	beq.n	8000dee <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fc      	adds	r4, r7, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 f933 	bl	8001050 <ADC_Enable>
 8000dea:	0003      	movs	r3, r0
 8000dec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dee:	230f      	movs	r3, #15
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d120      	bne.n	8000e3a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_ADC_Start+0xa4>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0052      	lsls	r2, r2, #1
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2234      	movs	r2, #52	; 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	221c      	movs	r2, #28
 8000e1e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	e003      	b.n	8000e3a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e32:	230f      	movs	r3, #15
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	2202      	movs	r2, #2
 8000e38:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b005      	add	sp, #20
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	fffff0fe 	.word	0xfffff0fe

08000e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	055b      	lsls	r3, r3, #21
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d011      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x46>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d00d      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x46>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d009      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x46>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d005      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x46>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d001      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x46>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2234      	movs	r2, #52	; 0x34
 8000eae:	5c9b      	ldrb	r3, [r3, r2]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x54>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e0bb      	b.n	8001030 <HAL_ADC_ConfigChannel+0x1cc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2234      	movs	r2, #52	; 0x34
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d000      	beq.n	8000ece <HAL_ADC_ConfigChannel+0x6a>
 8000ecc:	e09f      	b.n	800100e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a59      	ldr	r2, [pc, #356]	; (8001038 <HAL_ADC_ConfigChannel+0x1d4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d100      	bne.n	8000eda <HAL_ADC_ConfigChannel+0x76>
 8000ed8:	e077      	b.n	8000fca <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	055b      	lsls	r3, r3, #21
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d037      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d033      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d02f      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d02b      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d027      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d023      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2b06      	cmp	r3, #6
 8000f2a:	d01f      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d01b      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	2107      	movs	r1, #7
 8000f40:	400b      	ands	r3, r1
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d012      	beq.n	8000f6c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2107      	movs	r1, #7
 8000f52:	438a      	bics	r2, r1
 8000f54:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6959      	ldr	r1, [r3, #20]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2207      	movs	r2, #7
 8000f62:	401a      	ands	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d003      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x118>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b11      	cmp	r3, #17
 8000f7a:	d152      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_ADC_ConfigChannel+0x1d8>)
 8000f7e:	6819      	ldr	r1, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d102      	bne.n	8000f8e <HAL_ADC_ConfigChannel+0x12a>
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	041b      	lsls	r3, r3, #16
 8000f8c:	e001      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x12e>
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	03db      	lsls	r3, r3, #15
 8000f92:	4a2a      	ldr	r2, [pc, #168]	; (800103c <HAL_ADC_ConfigChannel+0x1d8>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d140      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_ADC_ConfigChannel+0x1dc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4927      	ldr	r1, [pc, #156]	; (8001044 <HAL_ADC_ConfigChannel+0x1e0>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff f8ae 	bl	8000108 <__udivsi3>
 8000fac:	0003      	movs	r3, r0
 8000fae:	001a      	movs	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	189b      	adds	r3, r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fba:	e002      	b.n	8000fc2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f9      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x158>
 8000fc8:	e02b      	b.n	8001022 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4099      	lsls	r1, r3
 8000fd8:	000b      	movs	r3, r1
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	d003      	beq.n	8000ff4 <HAL_ADC_ConfigChannel+0x190>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b11      	cmp	r3, #17
 8000ff2:	d116      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_ADC_ConfigChannel+0x1d8>)
 8000ff6:	6819      	ldr	r1, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x1a0>
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_ADC_ConfigChannel+0x1e4>)
 8001002:	e000      	b.n	8001006 <HAL_ADC_ConfigChannel+0x1a2>
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_ADC_ConfigChannel+0x1e8>)
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_ADC_ConfigChannel+0x1d8>)
 8001008:	400a      	ands	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e009      	b.n	8001022 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	2220      	movs	r2, #32
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2234      	movs	r2, #52	; 0x34
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781b      	ldrb	r3, [r3, #0]
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bd80      	pop	{r7, pc}
 8001038:	00001001 	.word	0x00001001
 800103c:	40012708 	.word	0x40012708
 8001040:	20000000 	.word	0x20000000
 8001044:	000f4240 	.word	0x000f4240
 8001048:	ff7fffff 	.word	0xff7fffff
 800104c:	ffbfffff 	.word	0xffbfffff

08001050 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b01      	cmp	r3, #1
 800106c:	d112      	bne.n	8001094 <ADC_Enable+0x44>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
 8001078:	2b01      	cmp	r3, #1
 800107a:	d009      	beq.n	8001090 <ADC_Enable+0x40>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	401a      	ands	r2, r3
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	429a      	cmp	r2, r3
 800108e:	d101      	bne.n	8001094 <ADC_Enable+0x44>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <ADC_Enable+0x46>
 8001094:	2300      	movs	r3, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d152      	bne.n	8001140 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a2a      	ldr	r2, [pc, #168]	; (800114c <ADC_Enable+0xfc>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010aa:	2210      	movs	r2, #16
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	2201      	movs	r2, #1
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e03f      	b.n	8001142 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	430a      	orrs	r2, r1
 80010d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <ADC_Enable+0x100>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	491f      	ldr	r1, [pc, #124]	; (8001154 <ADC_Enable+0x104>)
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff f815 	bl	8000108 <__udivsi3>
 80010de:	0003      	movs	r3, r0
 80010e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010e2:	e002      	b.n	80010ea <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f9      	bne.n	80010e4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80010f0:	f7ff fcea 	bl	8000ac8 <HAL_GetTick>
 80010f4:	0003      	movs	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010f8:	e01b      	b.n	8001132 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010fa:	f7ff fce5 	bl	8000ac8 <HAL_GetTick>
 80010fe:	0002      	movs	r2, r0
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d914      	bls.n	8001132 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4013      	ands	r3, r2
 8001112:	2b01      	cmp	r3, #1
 8001114:	d00d      	beq.n	8001132 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	2210      	movs	r2, #16
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2201      	movs	r2, #1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e007      	b.n	8001142 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	4013      	ands	r3, r2
 800113c:	2b01      	cmp	r3, #1
 800113e:	d1dc      	bne.n	80010fa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	0018      	movs	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	80000017 	.word	0x80000017
 8001150:	20000000 	.word	0x20000000
 8001154:	000f4240 	.word	0x000f4240

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	0002      	movs	r2, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b7f      	cmp	r3, #127	; 0x7f
 800116c:	d828      	bhi.n	80011c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116e:	4a2f      	ldr	r2, [pc, #188]	; (800122c <__NVIC_SetPriority+0xd4>)
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	33c0      	adds	r3, #192	; 0xc0
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	589b      	ldr	r3, [r3, r2]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	481f      	ldr	r0, [pc, #124]	; (800122c <__NVIC_SetPriority+0xd4>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	430a      	orrs	r2, r1
 80011b8:	33c0      	adds	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011be:	e031      	b.n	8001224 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <__NVIC_SetPriority+0xd8>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0019      	movs	r1, r3
 80011c8:	230f      	movs	r3, #15
 80011ca:	400b      	ands	r3, r1
 80011cc:	3b08      	subs	r3, #8
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3306      	adds	r3, #6
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1dfa      	adds	r2, r7, #7
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	0011      	movs	r1, r2
 80011e0:	2203      	movs	r2, #3
 80011e2:	400a      	ands	r2, r1
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	4091      	lsls	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	43d2      	mvns	r2, r2
 80011ee:	401a      	ands	r2, r3
 80011f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	22ff      	movs	r2, #255	; 0xff
 80011f8:	401a      	ands	r2, r3
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	0018      	movs	r0, r3
 8001200:	2303      	movs	r3, #3
 8001202:	4003      	ands	r3, r0
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <__NVIC_SetPriority+0xd8>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	001c      	movs	r4, r3
 8001210:	230f      	movs	r3, #15
 8001212:	4023      	ands	r3, r4
 8001214:	3b08      	subs	r3, #8
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	430a      	orrs	r2, r1
 800121a:	3306      	adds	r3, #6
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	18c3      	adds	r3, r0, r3
 8001220:	3304      	adds	r3, #4
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b003      	add	sp, #12
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	045b      	lsls	r3, r3, #17
 8001244:	429a      	cmp	r2, r3
 8001246:	d301      	bcc.n	800124c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001248:	2301      	movs	r3, #1
 800124a:	e010      	b.n	800126e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <SysTick_Config+0x44>)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	3a01      	subs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2103      	movs	r1, #3
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff7c 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x44>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x44>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	210f      	movs	r1, #15
 8001288:	187b      	adds	r3, r7, r1
 800128a:	1c02      	adds	r2, r0, #0
 800128c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ffbf 	bl	8001234 <SysTick_Config>
 80012b6:	0003      	movs	r3, r0
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e14f      	b.n	8001570 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <HAL_GPIO_Init+0x28>
 80012e6:	e140      	b.n	800156a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	409a      	lsls	r2, r3
 8001322:	0013      	movs	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	2201      	movs	r2, #1
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	4013      	ands	r3, r2
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	58d3      	ldr	r3, [r2, r3]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2207      	movs	r2, #7
 80013bc:	4013      	ands	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2107      	movs	r1, #7
 80013d6:	400b      	ands	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	401a      	ands	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	23c0      	movs	r3, #192	; 0xc0
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_GPIO_Init+0x174>
 8001432:	e09a      	b.n	800156a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b54      	ldr	r3, [pc, #336]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 8001436:	699a      	ldr	r2, [r3, #24]
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x2cc>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	589b      	ldr	r3, [r3, r2]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	2390      	movs	r3, #144	; 0x90
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	429a      	cmp	r2, r3
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x1e2>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a44      	ldr	r2, [pc, #272]	; (8001590 <HAL_GPIO_Init+0x2d0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x1de>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a43      	ldr	r2, [pc, #268]	; (8001594 <HAL_GPIO_Init+0x2d4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x1da>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a42      	ldr	r2, [pc, #264]	; (8001598 <HAL_GPIO_Init+0x2d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x1d6>
 8001492:	2303      	movs	r3, #3
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 8001496:	2305      	movs	r3, #5
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x1e4>
 80014a2:	2300      	movs	r3, #0
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	2103      	movs	r1, #3
 80014a8:	400a      	ands	r2, r1
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b4:	4935      	ldr	r1, [pc, #212]	; (800158c <HAL_GPIO_Init+0x2cc>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_GPIO_Init+0x2dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	4013      	ands	r3, r2
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_GPIO_Init+0x2dc>)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_GPIO_Init+0x2dc>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	035b      	lsls	r3, r3, #13
 800152e:	4013      	ands	r3, r2
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_GPIO_Init+0x2dc>)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43da      	mvns	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	039b      	lsls	r3, r3, #14
 8001558:	4013      	ands	r3, r2
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	40da      	lsrs	r2, r3
 8001578:	1e13      	subs	r3, r2, #0
 800157a:	d000      	beq.n	800157e <HAL_GPIO_Init+0x2be>
 800157c:	e6a8      	b.n	80012d0 <HAL_GPIO_Init+0x10>
  } 
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	b006      	add	sp, #24
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	000a      	movs	r2, r1
 80015aa:	1cbb      	adds	r3, r7, #2
 80015ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	1cba      	adds	r2, r7, #2
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	4013      	ands	r3, r2
 80015b8:	d004      	beq.n	80015c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015ba:	230f      	movs	r3, #15
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e003      	b.n	80015cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015c4:	230f      	movs	r3, #15
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015cc:	230f      	movs	r3, #15
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	781b      	ldrb	r3, [r3, #0]
  }
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	0008      	movs	r0, r1
 80015e4:	0011      	movs	r1, r2
 80015e6:	1cbb      	adds	r3, r7, #2
 80015e8:	1c02      	adds	r2, r0, #0
 80015ea:	801a      	strh	r2, [r3, #0]
 80015ec:	1c7b      	adds	r3, r7, #1
 80015ee:	1c0a      	adds	r2, r1, #0
 80015f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f2:	1c7b      	adds	r3, r7, #1
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fa:	1cbb      	adds	r3, r7, #2
 80015fc:	881a      	ldrh	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001602:	e003      	b.n	800160c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001604:	1cbb      	adds	r3, r7, #2
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e301      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d100      	bne.n	8001632 <HAL_RCC_OscConfig+0x1e>
 8001630:	e08d      	b.n	800174e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001632:	4bc3      	ldr	r3, [pc, #780]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	220c      	movs	r2, #12
 8001638:	4013      	ands	r3, r2
 800163a:	2b04      	cmp	r3, #4
 800163c:	d00e      	beq.n	800165c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800163e:	4bc0      	ldr	r3, [pc, #768]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	220c      	movs	r2, #12
 8001644:	4013      	ands	r3, r2
 8001646:	2b08      	cmp	r3, #8
 8001648:	d116      	bne.n	8001678 <HAL_RCC_OscConfig+0x64>
 800164a:	4bbd      	ldr	r3, [pc, #756]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	025b      	lsls	r3, r3, #9
 8001652:	401a      	ands	r2, r3
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	429a      	cmp	r2, r3
 800165a:	d10d      	bne.n	8001678 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	4bb8      	ldr	r3, [pc, #736]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCC_OscConfig+0x56>
 8001668:	e070      	b.n	800174c <HAL_RCC_OscConfig+0x138>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d000      	beq.n	8001674 <HAL_RCC_OscConfig+0x60>
 8001672:	e06b      	b.n	800174c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e2d8      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x7c>
 8001680:	4baf      	ldr	r3, [pc, #700]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4bae      	ldr	r3, [pc, #696]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e02f      	b.n	80016f0 <HAL_RCC_OscConfig+0xdc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x9e>
 8001698:	4ba9      	ldr	r3, [pc, #676]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4ba8      	ldr	r3, [pc, #672]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800169e:	49a9      	ldr	r1, [pc, #676]	; (8001944 <HAL_RCC_OscConfig+0x330>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	4ba6      	ldr	r3, [pc, #664]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4ba5      	ldr	r3, [pc, #660]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	49a7      	ldr	r1, [pc, #668]	; (8001948 <HAL_RCC_OscConfig+0x334>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e01e      	b.n	80016f0 <HAL_RCC_OscConfig+0xdc>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d10e      	bne.n	80016d8 <HAL_RCC_OscConfig+0xc4>
 80016ba:	4ba1      	ldr	r3, [pc, #644]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4ba0      	ldr	r3, [pc, #640]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	02c9      	lsls	r1, r1, #11
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	4b9d      	ldr	r3, [pc, #628]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b9c      	ldr	r3, [pc, #624]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xdc>
 80016d8:	4b99      	ldr	r3, [pc, #612]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b98      	ldr	r3, [pc, #608]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016de:	4999      	ldr	r1, [pc, #612]	; (8001944 <HAL_RCC_OscConfig+0x330>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	4b96      	ldr	r3, [pc, #600]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b95      	ldr	r3, [pc, #596]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	4997      	ldr	r1, [pc, #604]	; (8001948 <HAL_RCC_OscConfig+0x334>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d014      	beq.n	8001722 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f9e6 	bl	8000ac8 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001702:	f7ff f9e1 	bl	8000ac8 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e28a      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001714:	4b8a      	ldr	r3, [pc, #552]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0xee>
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff f9d1 	bl	8000ac8 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff f9cc 	bl	8000ac8 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e275      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b80      	ldr	r3, [pc, #512]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	029b      	lsls	r3, r3, #10
 8001746:	4013      	ands	r3, r2
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x118>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x146>
 8001758:	e069      	b.n	800182e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800175a:	4b79      	ldr	r3, [pc, #484]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	220c      	movs	r2, #12
 8001760:	4013      	ands	r3, r2
 8001762:	d00b      	beq.n	800177c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001764:	4b76      	ldr	r3, [pc, #472]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	220c      	movs	r2, #12
 800176a:	4013      	ands	r3, r2
 800176c:	2b08      	cmp	r3, #8
 800176e:	d11c      	bne.n	80017aa <HAL_RCC_OscConfig+0x196>
 8001770:	4b73      	ldr	r3, [pc, #460]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	4013      	ands	r3, r2
 800177a:	d116      	bne.n	80017aa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177c:	4b70      	ldr	r3, [pc, #448]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x17e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e24b      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b6b      	ldr	r3, [pc, #428]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	22f8      	movs	r2, #248	; 0xf8
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	00da      	lsls	r2, r3, #3
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a8:	e041      	b.n	800182e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d024      	beq.n	80017fc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b62      	ldr	r3, [pc, #392]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff f983 	bl	8000ac8 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c8:	f7ff f97e 	bl	8000ac8 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e227      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f1      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b56      	ldr	r3, [pc, #344]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	22f8      	movs	r2, #248	; 0xf8
 80017ea:	4393      	bics	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00da      	lsls	r2, r3, #3
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e018      	b.n	800182e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fc:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001802:	2101      	movs	r1, #1
 8001804:	438a      	bics	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff f95e 	bl	8000ac8 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff f959 	bl	8000ac8 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e202      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001824:	4b46      	ldr	r3, [pc, #280]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d1f1      	bne.n	8001812 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2208      	movs	r2, #8
 8001834:	4013      	ands	r3, r2
 8001836:	d036      	beq.n	80018a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d019      	beq.n	8001874 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001846:	2101      	movs	r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff f93c 	bl	8000ac8 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff f937 	bl	8000ac8 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1e0      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d0f1      	beq.n	8001856 <HAL_RCC_OscConfig+0x242>
 8001872:	e018      	b.n	80018a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001878:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800187a:	2101      	movs	r1, #1
 800187c:	438a      	bics	r2, r1
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff f922 	bl	8000ac8 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff f91d 	bl	8000ac8 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1c6      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f1      	bne.n	800188a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2204      	movs	r2, #4
 80018ac:	4013      	ands	r3, r2
 80018ae:	d100      	bne.n	80018b2 <HAL_RCC_OscConfig+0x29e>
 80018b0:	e0b4      	b.n	8001a1c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	201f      	movs	r0, #31
 80018b4:	183b      	adds	r3, r7, r0
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	055b      	lsls	r3, r3, #21
 80018c2:	4013      	ands	r3, r2
 80018c4:	d110      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	0549      	lsls	r1, r1, #21
 80018d0:	430a      	orrs	r2, r1
 80018d2:	61da      	str	r2, [r3, #28]
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018e2:	183b      	adds	r3, r7, r0
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_RCC_OscConfig+0x338>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4013      	ands	r3, r2
 80018f2:	d11a      	bne.n	800192a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_RCC_OscConfig+0x338>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_RCC_OscConfig+0x338>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0049      	lsls	r1, r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff f8e1 	bl	8000ac8 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190c:	f7ff f8dc 	bl	8000ac8 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e185      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_OscConfig+0x338>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4013      	ands	r3, r2
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10e      	bne.n	8001950 <HAL_RCC_OscConfig+0x33c>
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	4b02      	ldr	r3, [pc, #8]	; (8001940 <HAL_RCC_OscConfig+0x32c>)
 8001938:	2101      	movs	r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	621a      	str	r2, [r3, #32]
 800193e:	e035      	b.n	80019ac <HAL_RCC_OscConfig+0x398>
 8001940:	40021000 	.word	0x40021000
 8001944:	fffeffff 	.word	0xfffeffff
 8001948:	fffbffff 	.word	0xfffbffff
 800194c:	40007000 	.word	0x40007000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x35e>
 8001958:	4bb6      	ldr	r3, [pc, #728]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	4bb5      	ldr	r3, [pc, #724]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	4bb3      	ldr	r3, [pc, #716]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	4bb2      	ldr	r3, [pc, #712]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 800196a:	2104      	movs	r1, #4
 800196c:	438a      	bics	r2, r1
 800196e:	621a      	str	r2, [r3, #32]
 8001970:	e01c      	b.n	80019ac <HAL_RCC_OscConfig+0x398>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x380>
 800197a:	4bae      	ldr	r3, [pc, #696]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	4bad      	ldr	r3, [pc, #692]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001980:	2104      	movs	r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	621a      	str	r2, [r3, #32]
 8001986:	4bab      	ldr	r3, [pc, #684]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	4baa      	ldr	r3, [pc, #680]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	621a      	str	r2, [r3, #32]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x398>
 8001994:	4ba7      	ldr	r3, [pc, #668]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	4ba6      	ldr	r3, [pc, #664]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 800199a:	2101      	movs	r1, #1
 800199c:	438a      	bics	r2, r1
 800199e:	621a      	str	r2, [r3, #32]
 80019a0:	4ba4      	ldr	r3, [pc, #656]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 80019a2:	6a1a      	ldr	r2, [r3, #32]
 80019a4:	4ba3      	ldr	r3, [pc, #652]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 80019a6:	2104      	movs	r1, #4
 80019a8:	438a      	bics	r2, r1
 80019aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d014      	beq.n	80019de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff f888 	bl	8000ac8 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e009      	b.n	80019d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff f883 	bl	8000ac8 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	4a9b      	ldr	r2, [pc, #620]	; (8001c38 <HAL_RCC_OscConfig+0x624>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e12b      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	4b98      	ldr	r3, [pc, #608]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x3aa>
 80019dc:	e013      	b.n	8001a06 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff f873 	bl	8000ac8 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e6:	e009      	b.n	80019fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff f86e 	bl	8000ac8 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4a91      	ldr	r2, [pc, #580]	; (8001c38 <HAL_RCC_OscConfig+0x624>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e116      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a06:	231f      	movs	r3, #31
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a10:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a12:	69da      	ldr	r2, [r3, #28]
 8001a14:	4b87      	ldr	r3, [pc, #540]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a16:	4989      	ldr	r1, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x628>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2210      	movs	r2, #16
 8001a22:	4013      	ands	r3, r2
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d12a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a32:	4b80      	ldr	r3, [pc, #512]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a34:	2104      	movs	r1, #4
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a3a:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3e:	4b7d      	ldr	r3, [pc, #500]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a40:	2101      	movs	r1, #1
 8001a42:	430a      	orrs	r2, r1
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f83f 	bl	8000ac8 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a50:	f7ff f83a 	bl	8000ac8 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0e3      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a62:	4b74      	ldr	r3, [pc, #464]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f1      	beq.n	8001a50 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a6c:	4b71      	ldr	r3, [pc, #452]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a70:	22f8      	movs	r2, #248	; 0xf8
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	00da      	lsls	r2, r3, #3
 8001a7c:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
 8001a82:	e034      	b.n	8001aee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	3305      	adds	r3, #5
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a8c:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a92:	2104      	movs	r1, #4
 8001a94:	438a      	bics	r2, r1
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a98:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	22f8      	movs	r2, #248	; 0xf8
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	00da      	lsls	r2, r3, #3
 8001aa8:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
 8001aae:	e01e      	b.n	8001aee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ab0:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001abc:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7fe fffe 	bl	8000ac8 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ad2:	f7fe fff9 	bl	8000ac8 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0a2      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f1      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d100      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4e4>
 8001af6:	e097      	b.n	8001c28 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	220c      	movs	r2, #12
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x4f2>
 8001b04:	e06b      	b.n	8001bde <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d14c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b14:	494a      	ldr	r1, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x62c>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7fe ffd5 	bl	8000ac8 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7fe ffd0 	bl	8000ac8 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e079      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	049b      	lsls	r3, r3, #18
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	220f      	movs	r2, #15
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <HAL_RCC_OscConfig+0x630>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	0449      	lsls	r1, r1, #17
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ffa3 	bl	8000ac8 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7fe ff9e 	bl	8000ac8 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e047      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	049b      	lsls	r3, r3, #18
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x574>
 8001ba6:	e03f      	b.n	8001c28 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001bae:	4924      	ldr	r1, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x62c>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe ff88 	bl	8000ac8 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe ff83 	bl	8000ac8 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e02c      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	049b      	lsls	r3, r3, #18
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5aa>
 8001bdc:	e024      	b.n	8001c28 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e01f      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d10e      	bne.n	8001c24 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	220f      	movs	r2, #15
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	23f0      	movs	r3, #240	; 0xf0
 8001c18:	039b      	lsls	r3, r3, #14
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b008      	add	sp, #32
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000
 8001c38:	00001388 	.word	0x00001388
 8001c3c:	efffffff 	.word	0xefffffff
 8001c40:	feffffff 	.word	0xfeffffff
 8001c44:	ffc2ffff 	.word	0xffc2ffff

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b3      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d911      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	4b55      	ldr	r3, [pc, #340]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e09a      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d015      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d006      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001ca8:	21e0      	movs	r1, #224	; 0xe0
 8001caa:	00c9      	lsls	r1, r1, #3
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	22f0      	movs	r2, #240	; 0xf0
 8001cb6:	4393      	bics	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d040      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	029b      	lsls	r3, r3, #10
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d114      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e06e      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	049b      	lsls	r3, r3, #18
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e062      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e05b      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2203      	movs	r2, #3
 8001d12:	4393      	bics	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d20:	f7fe fed2 	bl	8000ac8 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2a:	f7fe fecd 	bl	8000ac8 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_RCC_ClockConfig+0x18c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e042      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	220c      	movs	r2, #12
 8001d44:	401a      	ands	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1ec      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d211      	bcs.n	8001d82 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4393      	bics	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCC_ClockConfig+0x184>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e020      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_RCC_ClockConfig+0x190>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001da0:	f000 f820 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001da4:	0001      	movs	r1, r0
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_ClockConfig+0x188>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	220f      	movs	r2, #15
 8001dae:	4013      	ands	r3, r2
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x194>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	000a      	movs	r2, r1
 8001db6:	40da      	lsrs	r2, r3
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x198>)
 8001dba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f7fe fe3d 	bl	8000a3c <HAL_InitTick>
  
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	00001388 	.word	0x00001388
 8001dd8:	fffff8ff 	.word	0xfffff8ff
 8001ddc:	08002f34 	.word	0x08002f34
 8001de0:	20000000 	.word	0x20000000

08001de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b08f      	sub	sp, #60	; 0x3c
 8001de8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001dea:	2314      	movs	r3, #20
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001df2:	c313      	stmia	r3!, {r0, r1, r4}
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dfe:	c313      	stmia	r3!, {r0, r1, r4}
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	220c      	movs	r2, #12
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d002      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x4a>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d003      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x50>
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e32:	e02d      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e36:	0c9b      	lsrs	r3, r3, #18
 8001e38:	220f      	movs	r2, #15
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2214      	movs	r2, #20
 8001e3e:	18ba      	adds	r2, r7, r2
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	220f      	movs	r2, #15
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	1d3a      	adds	r2, r7, #4
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e5e:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e60:	f7fe f952 	bl	8000108 <__udivsi3>
 8001e64:	0003      	movs	r3, r0
 8001e66:	001a      	movs	r2, r3
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	4353      	muls	r3, r2
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	e009      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e72:	000a      	movs	r2, r1
 8001e74:	0152      	lsls	r2, r2, #5
 8001e76:	1a52      	subs	r2, r2, r1
 8001e78:	0193      	lsls	r3, r2, #6
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	185b      	adds	r3, r3, r1
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e88:	e002      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b00f      	add	sp, #60	; 0x3c
 8001e98:	bd90      	pop	{r4, r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	08002f14 	.word	0x08002f14
 8001ea0:	08002f24 	.word	0x08002f24
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200

08001eac <Sifirla>:

#include "main.h"



void Sifirla(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <Sifirla+0x70>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2108      	movs	r1, #8
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff fb8f 	bl	80015da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <Sifirla+0x70>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff fb89 	bl	80015da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <Sifirla+0x70>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2110      	movs	r1, #16
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fb83 	bl	80015da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <Sifirla+0x70>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2120      	movs	r1, #32
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff fb7d 	bl	80015da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <Sifirla+0x70>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2140      	movs	r1, #64	; 0x40
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff fb77 	bl	80015da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <Sifirla+0x70>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff fb71 	bl	80015da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <Sifirla+0x70>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	0019      	movs	r1, r3
 8001f02:	f7ff fb6a 	bl	80015da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4804      	ldr	r0, [pc, #16]	; (8001f1c <Sifirla+0x70>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	0019      	movs	r1, r3
 8001f10:	f7ff fb63 	bl	80015da <HAL_GPIO_WritePin>
 }
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	48000400 	.word	0x48000400

08001f20 <Disp>:



void Disp(int x){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]




    int birler=0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
    int onlar=0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
    int yuzler=0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
    int a=0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]

    birler=x%10;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	210a      	movs	r1, #10
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7fe fa53 	bl	80003e8 <__aeabi_idivmod>
 8001f42:	000b      	movs	r3, r1
 8001f44:	617b      	str	r3, [r7, #20]

    onlar=x/10;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	210a      	movs	r1, #10
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7fe f966 	bl	800021c <__divsi3>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]
    onlar=onlar%10;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	210a      	movs	r1, #10
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7fe fa45 	bl	80003e8 <__aeabi_idivmod>
 8001f5e:	000b      	movs	r3, r1
 8001f60:	613b      	str	r3, [r7, #16]

    a=x/100;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2164      	movs	r1, #100	; 0x64
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7fe f958 	bl	800021c <__divsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60bb      	str	r3, [r7, #8]
    yuzler=a ;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60fb      	str	r3, [r7, #12]

   //////////XXXXXXXXXXXXXX//BİRLER//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//BİRLER//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//BİRLER//XXXXXXXXXXXXX//////////////////



	switch(birler){
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d900      	bls.n	8001f7c <Disp+0x5c>
 8001f7a:	e280      	b.n	800247e <Disp+0x55e>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	009a      	lsls	r2, r3, #2
 8001f80:	4bde      	ldr	r3, [pc, #888]	; (80022fc <Disp+0x3dc>)
 8001f82:	18d3      	adds	r3, r2, r3
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	469f      	mov	pc, r3



		case 0 :
		                      //0
		Sifirla();
 8001f88:	f7ff ff90 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	0119      	lsls	r1, r3, #4
 8001f90:	2390      	movs	r3, #144	; 0x90
 8001f92:	05db      	lsls	r3, r3, #23
 8001f94:	2201      	movs	r2, #1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff fb1f 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001f9c:	4bd8      	ldr	r3, [pc, #864]	; (8002300 <Disp+0x3e0>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff fb19 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001fa8:	4bd5      	ldr	r3, [pc, #852]	; (8002300 <Disp+0x3e0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	2110      	movs	r1, #16
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff fb13 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8001fb4:	4bd2      	ldr	r3, [pc, #840]	; (8002300 <Disp+0x3e0>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2120      	movs	r1, #32
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7ff fb0d 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8001fc0:	4bcf      	ldr	r3, [pc, #828]	; (8002300 <Disp+0x3e0>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff fb07 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8001fcc:	4bcc      	ldr	r3, [pc, #816]	; (8002300 <Disp+0x3e0>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7ff fb01 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	48c8      	ldr	r0, [pc, #800]	; (8002300 <Disp+0x3e0>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	f7ff fafa 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	48c5      	ldr	r0, [pc, #788]	; (8002300 <Disp+0x3e0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	0019      	movs	r1, r3
 8001ff0:	f7ff faf3 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	0119      	lsls	r1, r3, #4
 8001ff8:	2390      	movs	r3, #144	; 0x90
 8001ffa:	05db      	lsls	r3, r3, #23
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff faeb 	bl	80015da <HAL_GPIO_WritePin>


		break;
 8002004:	e23b      	b.n	800247e <Disp+0x55e>


		case 1 :

		Sifirla();
 8002006:	f7ff ff51 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	0119      	lsls	r1, r3, #4
 800200e:	2390      	movs	r3, #144	; 0x90
 8002010:	05db      	lsls	r3, r3, #23
 8002012:	2201      	movs	r2, #1
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fae0 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800201a:	4bb9      	ldr	r3, [pc, #740]	; (8002300 <Disp+0x3e0>)
 800201c:	2200      	movs	r2, #0
 800201e:	2108      	movs	r1, #8
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff fada 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002026:	4bb6      	ldr	r3, [pc, #728]	; (8002300 <Disp+0x3e0>)
 8002028:	2201      	movs	r2, #1
 800202a:	2110      	movs	r1, #16
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fad4 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002032:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <Disp+0x3e0>)
 8002034:	2201      	movs	r2, #1
 8002036:	2120      	movs	r1, #32
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff face 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800203e:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <Disp+0x3e0>)
 8002040:	2200      	movs	r2, #0
 8002042:	2140      	movs	r1, #64	; 0x40
 8002044:	0018      	movs	r0, r3
 8002046:	f7ff fac8 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800204a:	4bad      	ldr	r3, [pc, #692]	; (8002300 <Disp+0x3e0>)
 800204c:	2200      	movs	r2, #0
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff fac2 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	48a9      	ldr	r0, [pc, #676]	; (8002300 <Disp+0x3e0>)
 800205c:	2200      	movs	r2, #0
 800205e:	0019      	movs	r1, r3
 8002060:	f7ff fabb 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	48a5      	ldr	r0, [pc, #660]	; (8002300 <Disp+0x3e0>)
 800206a:	2200      	movs	r2, #0
 800206c:	0019      	movs	r1, r3
 800206e:	f7ff fab4 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	0119      	lsls	r1, r3, #4
 8002076:	2390      	movs	r3, #144	; 0x90
 8002078:	05db      	lsls	r3, r3, #23
 800207a:	2200      	movs	r2, #0
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff faac 	bl	80015da <HAL_GPIO_WritePin>


		break;
 8002082:	e1fc      	b.n	800247e <Disp+0x55e>


		case 2 :

		Sifirla();
 8002084:	f7ff ff12 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	0119      	lsls	r1, r3, #4
 800208c:	2390      	movs	r3, #144	; 0x90
 800208e:	05db      	lsls	r3, r3, #23
 8002090:	2201      	movs	r2, #1
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff faa1 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002098:	4b99      	ldr	r3, [pc, #612]	; (8002300 <Disp+0x3e0>)
 800209a:	2201      	movs	r2, #1
 800209c:	2108      	movs	r1, #8
 800209e:	0018      	movs	r0, r3
 80020a0:	f7ff fa9b 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80020a4:	4b96      	ldr	r3, [pc, #600]	; (8002300 <Disp+0x3e0>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	2110      	movs	r1, #16
 80020aa:	0018      	movs	r0, r3
 80020ac:	f7ff fa95 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80020b0:	4b93      	ldr	r3, [pc, #588]	; (8002300 <Disp+0x3e0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	2120      	movs	r1, #32
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fa8f 	bl	80015da <HAL_GPIO_WritePin>
	 	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80020bc:	4b90      	ldr	r3, [pc, #576]	; (8002300 <Disp+0x3e0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	2140      	movs	r1, #64	; 0x40
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff fa89 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80020c8:	4b8d      	ldr	r3, [pc, #564]	; (8002300 <Disp+0x3e0>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff fa83 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4889      	ldr	r0, [pc, #548]	; (8002300 <Disp+0x3e0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	0019      	movs	r1, r3
 80020de:	f7ff fa7c 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4886      	ldr	r0, [pc, #536]	; (8002300 <Disp+0x3e0>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	0019      	movs	r1, r3
 80020ec:	f7ff fa75 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	0119      	lsls	r1, r3, #4
 80020f4:	2390      	movs	r3, #144	; 0x90
 80020f6:	05db      	lsls	r3, r3, #23
 80020f8:	2200      	movs	r2, #0
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff fa6d 	bl	80015da <HAL_GPIO_WritePin>


		break;
 8002100:	e1bd      	b.n	800247e <Disp+0x55e>


		case 3 :

		Sifirla();
 8002102:	f7ff fed3 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	0119      	lsls	r1, r3, #4
 800210a:	2390      	movs	r3, #144	; 0x90
 800210c:	05db      	lsls	r3, r3, #23
 800210e:	2201      	movs	r2, #1
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff fa62 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002116:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <Disp+0x3e0>)
 8002118:	2201      	movs	r2, #1
 800211a:	2108      	movs	r1, #8
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff fa5c 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002122:	4b77      	ldr	r3, [pc, #476]	; (8002300 <Disp+0x3e0>)
 8002124:	2201      	movs	r2, #1
 8002126:	2110      	movs	r1, #16
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fa56 	bl	80015da <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800212e:	4b74      	ldr	r3, [pc, #464]	; (8002300 <Disp+0x3e0>)
 8002130:	2201      	movs	r2, #1
 8002132:	2120      	movs	r1, #32
 8002134:	0018      	movs	r0, r3
 8002136:	f7ff fa50 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 800213a:	4b71      	ldr	r3, [pc, #452]	; (8002300 <Disp+0x3e0>)
 800213c:	2201      	movs	r2, #1
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fa4a 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002146:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <Disp+0x3e0>)
 8002148:	2200      	movs	r2, #0
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	0018      	movs	r0, r3
 800214e:	f7ff fa44 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	486a      	ldr	r0, [pc, #424]	; (8002300 <Disp+0x3e0>)
 8002158:	2200      	movs	r2, #0
 800215a:	0019      	movs	r1, r3
 800215c:	f7ff fa3d 	bl	80015da <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4866      	ldr	r0, [pc, #408]	; (8002300 <Disp+0x3e0>)
 8002166:	2201      	movs	r2, #1
 8002168:	0019      	movs	r1, r3
 800216a:	f7ff fa36 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	0119      	lsls	r1, r3, #4
 8002172:	2390      	movs	r3, #144	; 0x90
 8002174:	05db      	lsls	r3, r3, #23
 8002176:	2200      	movs	r2, #0
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fa2e 	bl	80015da <HAL_GPIO_WritePin>


		break;
 800217e:	e17e      	b.n	800247e <Disp+0x55e>


		case 4 :

		Sifirla();
 8002180:	f7ff fe94 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	0119      	lsls	r1, r3, #4
 8002188:	2390      	movs	r3, #144	; 0x90
 800218a:	05db      	lsls	r3, r3, #23
 800218c:	2201      	movs	r2, #1
 800218e:	0018      	movs	r0, r3
 8002190:	f7ff fa23 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <Disp+0x3e0>)
 8002196:	2200      	movs	r2, #0
 8002198:	2108      	movs	r1, #8
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff fa1d 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80021a0:	4b57      	ldr	r3, [pc, #348]	; (8002300 <Disp+0x3e0>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	2110      	movs	r1, #16
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7ff fa17 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80021ac:	4b54      	ldr	r3, [pc, #336]	; (8002300 <Disp+0x3e0>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	2120      	movs	r1, #32
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff fa11 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80021b8:	4b51      	ldr	r3, [pc, #324]	; (8002300 <Disp+0x3e0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff fa0b 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80021c4:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <Disp+0x3e0>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff fa05 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	484a      	ldr	r0, [pc, #296]	; (8002300 <Disp+0x3e0>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	0019      	movs	r1, r3
 80021da:	f7ff f9fe 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4847      	ldr	r0, [pc, #284]	; (8002300 <Disp+0x3e0>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	0019      	movs	r1, r3
 80021e8:	f7ff f9f7 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	0119      	lsls	r1, r3, #4
 80021f0:	2390      	movs	r3, #144	; 0x90
 80021f2:	05db      	lsls	r3, r3, #23
 80021f4:	2200      	movs	r2, #0
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7ff f9ef 	bl	80015da <HAL_GPIO_WritePin>


		break;
 80021fc:	e13f      	b.n	800247e <Disp+0x55e>


		case 5 :

		Sifirla();
 80021fe:	f7ff fe55 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	0119      	lsls	r1, r3, #4
 8002206:	2390      	movs	r3, #144	; 0x90
 8002208:	05db      	lsls	r3, r3, #23
 800220a:	2201      	movs	r2, #1
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff f9e4 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <Disp+0x3e0>)
 8002214:	2201      	movs	r2, #1
 8002216:	2108      	movs	r1, #8
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff f9de 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <Disp+0x3e0>)
 8002220:	2200      	movs	r2, #0
 8002222:	2110      	movs	r1, #16
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff f9d8 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <Disp+0x3e0>)
 800222c:	2201      	movs	r2, #1
 800222e:	2120      	movs	r1, #32
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff f9d2 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <Disp+0x3e0>)
 8002238:	2201      	movs	r2, #1
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff f9cc 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <Disp+0x3e0>)
 8002244:	2200      	movs	r2, #0
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff f9c6 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	482b      	ldr	r0, [pc, #172]	; (8002300 <Disp+0x3e0>)
 8002254:	2201      	movs	r2, #1
 8002256:	0019      	movs	r1, r3
 8002258:	f7ff f9bf 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4827      	ldr	r0, [pc, #156]	; (8002300 <Disp+0x3e0>)
 8002262:	2201      	movs	r2, #1
 8002264:	0019      	movs	r1, r3
 8002266:	f7ff f9b8 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	0119      	lsls	r1, r3, #4
 800226e:	2390      	movs	r3, #144	; 0x90
 8002270:	05db      	lsls	r3, r3, #23
 8002272:	2200      	movs	r2, #0
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff f9b0 	bl	80015da <HAL_GPIO_WritePin>


		break;
 800227a:	e100      	b.n	800247e <Disp+0x55e>


		case 6 :

		Sifirla();
 800227c:	f7ff fe16 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	0119      	lsls	r1, r3, #4
 8002284:	2390      	movs	r3, #144	; 0x90
 8002286:	05db      	lsls	r3, r3, #23
 8002288:	2201      	movs	r2, #1
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff f9a5 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <Disp+0x3e0>)
 8002292:	2201      	movs	r2, #1
 8002294:	2108      	movs	r1, #8
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff f99f 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <Disp+0x3e0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	2110      	movs	r1, #16
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff f999 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <Disp+0x3e0>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	2120      	movs	r1, #32
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff f993 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <Disp+0x3e0>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	2140      	movs	r1, #64	; 0x40
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff f98d 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <Disp+0x3e0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff f987 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <Disp+0x3e0>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	0019      	movs	r1, r3
 80022d6:	f7ff f980 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4808      	ldr	r0, [pc, #32]	; (8002300 <Disp+0x3e0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	0019      	movs	r1, r3
 80022e4:	f7ff f979 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	0119      	lsls	r1, r3, #4
 80022ec:	2390      	movs	r3, #144	; 0x90
 80022ee:	05db      	lsls	r3, r3, #23
 80022f0:	2200      	movs	r2, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff f971 	bl	80015da <HAL_GPIO_WritePin>


		break;
 80022f8:	e0c1      	b.n	800247e <Disp+0x55e>
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	08002f44 	.word	0x08002f44
 8002300:	48000400 	.word	0x48000400


		case 7 :

		Sifirla();
 8002304:	f7ff fdd2 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	0119      	lsls	r1, r3, #4
 800230c:	2390      	movs	r3, #144	; 0x90
 800230e:	05db      	lsls	r3, r3, #23
 8002310:	2201      	movs	r2, #1
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff f961 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002318:	4bdc      	ldr	r3, [pc, #880]	; (800268c <Disp+0x76c>)
 800231a:	2201      	movs	r2, #1
 800231c:	2108      	movs	r1, #8
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff f95b 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002324:	4bd9      	ldr	r3, [pc, #868]	; (800268c <Disp+0x76c>)
 8002326:	2201      	movs	r2, #1
 8002328:	2110      	movs	r1, #16
 800232a:	0018      	movs	r0, r3
 800232c:	f7ff f955 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002330:	4bd6      	ldr	r3, [pc, #856]	; (800268c <Disp+0x76c>)
 8002332:	2201      	movs	r2, #1
 8002334:	2120      	movs	r1, #32
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff f94f 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800233c:	4bd3      	ldr	r3, [pc, #844]	; (800268c <Disp+0x76c>)
 800233e:	2200      	movs	r2, #0
 8002340:	2140      	movs	r1, #64	; 0x40
 8002342:	0018      	movs	r0, r3
 8002344:	f7ff f949 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002348:	4bd0      	ldr	r3, [pc, #832]	; (800268c <Disp+0x76c>)
 800234a:	2200      	movs	r2, #0
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff f943 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	48cc      	ldr	r0, [pc, #816]	; (800268c <Disp+0x76c>)
 800235a:	2200      	movs	r2, #0
 800235c:	0019      	movs	r1, r3
 800235e:	f7ff f93c 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	48c9      	ldr	r0, [pc, #804]	; (800268c <Disp+0x76c>)
 8002368:	2200      	movs	r2, #0
 800236a:	0019      	movs	r1, r3
 800236c:	f7ff f935 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	0119      	lsls	r1, r3, #4
 8002374:	2390      	movs	r3, #144	; 0x90
 8002376:	05db      	lsls	r3, r3, #23
 8002378:	2200      	movs	r2, #0
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff f92d 	bl	80015da <HAL_GPIO_WritePin>


		break;
 8002380:	e07d      	b.n	800247e <Disp+0x55e>


		case 8 :

		Sifirla();
 8002382:	f7ff fd93 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	0119      	lsls	r1, r3, #4
 800238a:	2390      	movs	r3, #144	; 0x90
 800238c:	05db      	lsls	r3, r3, #23
 800238e:	2201      	movs	r2, #1
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff f922 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002396:	4bbd      	ldr	r3, [pc, #756]	; (800268c <Disp+0x76c>)
 8002398:	2201      	movs	r2, #1
 800239a:	2108      	movs	r1, #8
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff f91c 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80023a2:	4bba      	ldr	r3, [pc, #744]	; (800268c <Disp+0x76c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	2110      	movs	r1, #16
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff f916 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80023ae:	4bb7      	ldr	r3, [pc, #732]	; (800268c <Disp+0x76c>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	2120      	movs	r1, #32
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7ff f910 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80023ba:	4bb4      	ldr	r3, [pc, #720]	; (800268c <Disp+0x76c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff f90a 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80023c6:	4bb1      	ldr	r3, [pc, #708]	; (800268c <Disp+0x76c>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff f904 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	48ad      	ldr	r0, [pc, #692]	; (800268c <Disp+0x76c>)
 80023d8:	2201      	movs	r2, #1
 80023da:	0019      	movs	r1, r3
 80023dc:	f7ff f8fd 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	48a9      	ldr	r0, [pc, #676]	; (800268c <Disp+0x76c>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	0019      	movs	r1, r3
 80023ea:	f7ff f8f6 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	0119      	lsls	r1, r3, #4
 80023f2:	2390      	movs	r3, #144	; 0x90
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	2200      	movs	r2, #0
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff f8ee 	bl	80015da <HAL_GPIO_WritePin>


		break;
 80023fe:	e03e      	b.n	800247e <Disp+0x55e>


		case 9 :

		Sifirla();
 8002400:	f7ff fd54 	bl	8001eac <Sifirla>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_SET);
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	0119      	lsls	r1, r3, #4
 8002408:	2390      	movs	r3, #144	; 0x90
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	2201      	movs	r2, #1
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff f8e3 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002414:	4b9d      	ldr	r3, [pc, #628]	; (800268c <Disp+0x76c>)
 8002416:	2201      	movs	r2, #1
 8002418:	2108      	movs	r1, #8
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff f8dd 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002420:	4b9a      	ldr	r3, [pc, #616]	; (800268c <Disp+0x76c>)
 8002422:	2201      	movs	r2, #1
 8002424:	2110      	movs	r1, #16
 8002426:	0018      	movs	r0, r3
 8002428:	f7ff f8d7 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800242c:	4b97      	ldr	r3, [pc, #604]	; (800268c <Disp+0x76c>)
 800242e:	2201      	movs	r2, #1
 8002430:	2120      	movs	r1, #32
 8002432:	0018      	movs	r0, r3
 8002434:	f7ff f8d1 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002438:	4b94      	ldr	r3, [pc, #592]	; (800268c <Disp+0x76c>)
 800243a:	2201      	movs	r2, #1
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	0018      	movs	r0, r3
 8002440:	f7ff f8cb 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002444:	4b91      	ldr	r3, [pc, #580]	; (800268c <Disp+0x76c>)
 8002446:	2200      	movs	r2, #0
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff f8c5 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	488d      	ldr	r0, [pc, #564]	; (800268c <Disp+0x76c>)
 8002456:	2201      	movs	r2, #1
 8002458:	0019      	movs	r1, r3
 800245a:	f7ff f8be 	bl	80015da <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	488a      	ldr	r0, [pc, #552]	; (800268c <Disp+0x76c>)
 8002464:	2201      	movs	r2, #1
 8002466:	0019      	movs	r1, r3
 8002468:	f7ff f8b7 	bl	80015da <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Birler_GPIO_Port, Birler_Pin , GPIO_PIN_RESET);
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	0119      	lsls	r1, r3, #4
 8002470:	2390      	movs	r3, #144	; 0x90
 8002472:	05db      	lsls	r3, r3, #23
 8002474:	2200      	movs	r2, #0
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff f8af 	bl	80015da <HAL_GPIO_WritePin>


		break;
 800247c:	46c0      	nop			; (mov r8, r8)

	//////////XXXXXXXXXXXXXX//ONLAR//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//ONLAR//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//ONLAR//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//BİRLER//XXXXXXXXXXXXX//////////////////



		switch(onlar){
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d900      	bls.n	8002486 <Disp+0x566>
 8002484:	e280      	b.n	8002988 <Disp+0xa68>
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	009a      	lsls	r2, r3, #2
 800248a:	4b81      	ldr	r3, [pc, #516]	; (8002690 <Disp+0x770>)
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	469f      	mov	pc, r3



			case 0 :
			                      //0
			Sifirla();
 8002492:	f7ff fd0b 	bl	8001eac <Sifirla>
			  HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	00d9      	lsls	r1, r3, #3
 800249a:	2390      	movs	r3, #144	; 0x90
 800249c:	05db      	lsls	r3, r3, #23
 800249e:	2201      	movs	r2, #1
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff f89a 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80024a6:	4b79      	ldr	r3, [pc, #484]	; (800268c <Disp+0x76c>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	2108      	movs	r1, #8
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff f894 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80024b2:	4b76      	ldr	r3, [pc, #472]	; (800268c <Disp+0x76c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	2110      	movs	r1, #16
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff f88e 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80024be:	4b73      	ldr	r3, [pc, #460]	; (800268c <Disp+0x76c>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	2120      	movs	r1, #32
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff f888 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80024ca:	4b70      	ldr	r3, [pc, #448]	; (800268c <Disp+0x76c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff f882 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80024d6:	4b6d      	ldr	r3, [pc, #436]	; (800268c <Disp+0x76c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff f87c 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4869      	ldr	r0, [pc, #420]	; (800268c <Disp+0x76c>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	0019      	movs	r1, r3
 80024ec:	f7ff f875 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4865      	ldr	r0, [pc, #404]	; (800268c <Disp+0x76c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	0019      	movs	r1, r3
 80024fa:	f7ff f86e 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	00d9      	lsls	r1, r3, #3
 8002502:	2390      	movs	r3, #144	; 0x90
 8002504:	05db      	lsls	r3, r3, #23
 8002506:	2200      	movs	r2, #0
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff f866 	bl	80015da <HAL_GPIO_WritePin>

			break;
 800250e:	e23b      	b.n	8002988 <Disp+0xa68>


			case 1 :

			Sifirla();
 8002510:	f7ff fccc 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	00d9      	lsls	r1, r3, #3
 8002518:	2390      	movs	r3, #144	; 0x90
 800251a:	05db      	lsls	r3, r3, #23
 800251c:	2201      	movs	r2, #1
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff f85b 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <Disp+0x76c>)
 8002526:	2200      	movs	r2, #0
 8002528:	2108      	movs	r1, #8
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff f855 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002530:	4b56      	ldr	r3, [pc, #344]	; (800268c <Disp+0x76c>)
 8002532:	2201      	movs	r2, #1
 8002534:	2110      	movs	r1, #16
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff f84f 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <Disp+0x76c>)
 800253e:	2201      	movs	r2, #1
 8002540:	2120      	movs	r1, #32
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff f849 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <Disp+0x76c>)
 800254a:	2200      	movs	r2, #0
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	0018      	movs	r0, r3
 8002550:	f7ff f843 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002554:	4b4d      	ldr	r3, [pc, #308]	; (800268c <Disp+0x76c>)
 8002556:	2200      	movs	r2, #0
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	0018      	movs	r0, r3
 800255c:	f7ff f83d 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4849      	ldr	r0, [pc, #292]	; (800268c <Disp+0x76c>)
 8002566:	2200      	movs	r2, #0
 8002568:	0019      	movs	r1, r3
 800256a:	f7ff f836 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4846      	ldr	r0, [pc, #280]	; (800268c <Disp+0x76c>)
 8002574:	2200      	movs	r2, #0
 8002576:	0019      	movs	r1, r3
 8002578:	f7ff f82f 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	00d9      	lsls	r1, r3, #3
 8002580:	2390      	movs	r3, #144	; 0x90
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	2200      	movs	r2, #0
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff f827 	bl	80015da <HAL_GPIO_WritePin>
			break;
 800258c:	e1fc      	b.n	8002988 <Disp+0xa68>


			case 2 :

			Sifirla();
 800258e:	f7ff fc8d 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	00d9      	lsls	r1, r3, #3
 8002596:	2390      	movs	r3, #144	; 0x90
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	2201      	movs	r2, #1
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff f81c 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <Disp+0x76c>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	2108      	movs	r1, #8
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7ff f816 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <Disp+0x76c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	2110      	movs	r1, #16
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff f810 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <Disp+0x76c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	2120      	movs	r1, #32
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7ff f80a 	bl	80015da <HAL_GPIO_WritePin>
		 	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <Disp+0x76c>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7ff f804 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <Disp+0x76c>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fe fffe 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	482a      	ldr	r0, [pc, #168]	; (800268c <Disp+0x76c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	0019      	movs	r1, r3
 80025e8:	f7fe fff7 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4826      	ldr	r0, [pc, #152]	; (800268c <Disp+0x76c>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	0019      	movs	r1, r3
 80025f6:	f7fe fff0 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	00d9      	lsls	r1, r3, #3
 80025fe:	2390      	movs	r3, #144	; 0x90
 8002600:	05db      	lsls	r3, r3, #23
 8002602:	2200      	movs	r2, #0
 8002604:	0018      	movs	r0, r3
 8002606:	f7fe ffe8 	bl	80015da <HAL_GPIO_WritePin>
			break;
 800260a:	e1bd      	b.n	8002988 <Disp+0xa68>


			case 3 :

			Sifirla();
 800260c:	f7ff fc4e 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	00d9      	lsls	r1, r3, #3
 8002614:	2390      	movs	r3, #144	; 0x90
 8002616:	05db      	lsls	r3, r3, #23
 8002618:	2201      	movs	r2, #1
 800261a:	0018      	movs	r0, r3
 800261c:	f7fe ffdd 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <Disp+0x76c>)
 8002622:	2201      	movs	r2, #1
 8002624:	2108      	movs	r1, #8
 8002626:	0018      	movs	r0, r3
 8002628:	f7fe ffd7 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800262c:	4b17      	ldr	r3, [pc, #92]	; (800268c <Disp+0x76c>)
 800262e:	2201      	movs	r2, #1
 8002630:	2110      	movs	r1, #16
 8002632:	0018      	movs	r0, r3
 8002634:	f7fe ffd1 	bl	80015da <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <Disp+0x76c>)
 800263a:	2201      	movs	r2, #1
 800263c:	2120      	movs	r1, #32
 800263e:	0018      	movs	r0, r3
 8002640:	f7fe ffcb 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <Disp+0x76c>)
 8002646:	2201      	movs	r2, #1
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	0018      	movs	r0, r3
 800264c:	f7fe ffc5 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <Disp+0x76c>)
 8002652:	2200      	movs	r2, #0
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0018      	movs	r0, r3
 8002658:	f7fe ffbf 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <Disp+0x76c>)
 8002662:	2200      	movs	r2, #0
 8002664:	0019      	movs	r1, r3
 8002666:	f7fe ffb8 	bl	80015da <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <Disp+0x76c>)
 8002670:	2201      	movs	r2, #1
 8002672:	0019      	movs	r1, r3
 8002674:	f7fe ffb1 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	00d9      	lsls	r1, r3, #3
 800267c:	2390      	movs	r3, #144	; 0x90
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	2200      	movs	r2, #0
 8002682:	0018      	movs	r0, r3
 8002684:	f7fe ffa9 	bl	80015da <HAL_GPIO_WritePin>
			break;
 8002688:	e17e      	b.n	8002988 <Disp+0xa68>
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	48000400 	.word	0x48000400
 8002690:	08002f6c 	.word	0x08002f6c


			case 4 :

			Sifirla();
 8002694:	f7ff fc0a 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	00d9      	lsls	r1, r3, #3
 800269c:	2390      	movs	r3, #144	; 0x90
 800269e:	05db      	lsls	r3, r3, #23
 80026a0:	2201      	movs	r2, #1
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7fe ff99 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80026a8:	4bdc      	ldr	r3, [pc, #880]	; (8002a1c <Disp+0xafc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	2108      	movs	r1, #8
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7fe ff93 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80026b4:	4bd9      	ldr	r3, [pc, #868]	; (8002a1c <Disp+0xafc>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	2110      	movs	r1, #16
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7fe ff8d 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80026c0:	4bd6      	ldr	r3, [pc, #856]	; (8002a1c <Disp+0xafc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	2120      	movs	r1, #32
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7fe ff87 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80026cc:	4bd3      	ldr	r3, [pc, #844]	; (8002a1c <Disp+0xafc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7fe ff81 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80026d8:	4bd0      	ldr	r3, [pc, #832]	; (8002a1c <Disp+0xafc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0018      	movs	r0, r3
 80026e0:	f7fe ff7b 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	48cc      	ldr	r0, [pc, #816]	; (8002a1c <Disp+0xafc>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	0019      	movs	r1, r3
 80026ee:	f7fe ff74 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	48c9      	ldr	r0, [pc, #804]	; (8002a1c <Disp+0xafc>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	0019      	movs	r1, r3
 80026fc:	f7fe ff6d 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	00d9      	lsls	r1, r3, #3
 8002704:	2390      	movs	r3, #144	; 0x90
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	2200      	movs	r2, #0
 800270a:	0018      	movs	r0, r3
 800270c:	f7fe ff65 	bl	80015da <HAL_GPIO_WritePin>
			break;
 8002710:	e13a      	b.n	8002988 <Disp+0xa68>


			case 5 :

			Sifirla();
 8002712:	f7ff fbcb 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	00d9      	lsls	r1, r3, #3
 800271a:	2390      	movs	r3, #144	; 0x90
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	2201      	movs	r2, #1
 8002720:	0018      	movs	r0, r3
 8002722:	f7fe ff5a 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002726:	4bbd      	ldr	r3, [pc, #756]	; (8002a1c <Disp+0xafc>)
 8002728:	2201      	movs	r2, #1
 800272a:	2108      	movs	r1, #8
 800272c:	0018      	movs	r0, r3
 800272e:	f7fe ff54 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8002732:	4bba      	ldr	r3, [pc, #744]	; (8002a1c <Disp+0xafc>)
 8002734:	2200      	movs	r2, #0
 8002736:	2110      	movs	r1, #16
 8002738:	0018      	movs	r0, r3
 800273a:	f7fe ff4e 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800273e:	4bb7      	ldr	r3, [pc, #732]	; (8002a1c <Disp+0xafc>)
 8002740:	2201      	movs	r2, #1
 8002742:	2120      	movs	r1, #32
 8002744:	0018      	movs	r0, r3
 8002746:	f7fe ff48 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 800274a:	4bb4      	ldr	r3, [pc, #720]	; (8002a1c <Disp+0xafc>)
 800274c:	2201      	movs	r2, #1
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	0018      	movs	r0, r3
 8002752:	f7fe ff42 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002756:	4bb1      	ldr	r3, [pc, #708]	; (8002a1c <Disp+0xafc>)
 8002758:	2200      	movs	r2, #0
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0018      	movs	r0, r3
 800275e:	f7fe ff3c 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	48ad      	ldr	r0, [pc, #692]	; (8002a1c <Disp+0xafc>)
 8002768:	2201      	movs	r2, #1
 800276a:	0019      	movs	r1, r3
 800276c:	f7fe ff35 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	48a9      	ldr	r0, [pc, #676]	; (8002a1c <Disp+0xafc>)
 8002776:	2201      	movs	r2, #1
 8002778:	0019      	movs	r1, r3
 800277a:	f7fe ff2e 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	00d9      	lsls	r1, r3, #3
 8002782:	2390      	movs	r3, #144	; 0x90
 8002784:	05db      	lsls	r3, r3, #23
 8002786:	2200      	movs	r2, #0
 8002788:	0018      	movs	r0, r3
 800278a:	f7fe ff26 	bl	80015da <HAL_GPIO_WritePin>
			break;
 800278e:	e0fb      	b.n	8002988 <Disp+0xa68>


			case 6 :

			Sifirla();
 8002790:	f7ff fb8c 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	00d9      	lsls	r1, r3, #3
 8002798:	2390      	movs	r3, #144	; 0x90
 800279a:	05db      	lsls	r3, r3, #23
 800279c:	2201      	movs	r2, #1
 800279e:	0018      	movs	r0, r3
 80027a0:	f7fe ff1b 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80027a4:	4b9d      	ldr	r3, [pc, #628]	; (8002a1c <Disp+0xafc>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	2108      	movs	r1, #8
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fe ff15 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80027b0:	4b9a      	ldr	r3, [pc, #616]	; (8002a1c <Disp+0xafc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	2110      	movs	r1, #16
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7fe ff0f 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80027bc:	4b97      	ldr	r3, [pc, #604]	; (8002a1c <Disp+0xafc>)
 80027be:	2201      	movs	r2, #1
 80027c0:	2120      	movs	r1, #32
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fe ff09 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80027c8:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <Disp+0xafc>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fe ff03 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <Disp+0xafc>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fe fefd 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	488d      	ldr	r0, [pc, #564]	; (8002a1c <Disp+0xafc>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	0019      	movs	r1, r3
 80027ea:	f7fe fef6 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	488a      	ldr	r0, [pc, #552]	; (8002a1c <Disp+0xafc>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	0019      	movs	r1, r3
 80027f8:	f7fe feef 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	00d9      	lsls	r1, r3, #3
 8002800:	2390      	movs	r3, #144	; 0x90
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	2200      	movs	r2, #0
 8002806:	0018      	movs	r0, r3
 8002808:	f7fe fee7 	bl	80015da <HAL_GPIO_WritePin>
			break;
 800280c:	e0bc      	b.n	8002988 <Disp+0xa68>


			case 7 :

			Sifirla();
 800280e:	f7ff fb4d 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	00d9      	lsls	r1, r3, #3
 8002816:	2390      	movs	r3, #144	; 0x90
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	2201      	movs	r2, #1
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe fedc 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002822:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <Disp+0xafc>)
 8002824:	2201      	movs	r2, #1
 8002826:	2108      	movs	r1, #8
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe fed6 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <Disp+0xafc>)
 8002830:	2201      	movs	r2, #1
 8002832:	2110      	movs	r1, #16
 8002834:	0018      	movs	r0, r3
 8002836:	f7fe fed0 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <Disp+0xafc>)
 800283c:	2201      	movs	r2, #1
 800283e:	2120      	movs	r1, #32
 8002840:	0018      	movs	r0, r3
 8002842:	f7fe feca 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8002846:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <Disp+0xafc>)
 8002848:	2200      	movs	r2, #0
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	0018      	movs	r0, r3
 800284e:	f7fe fec4 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <Disp+0xafc>)
 8002854:	2200      	movs	r2, #0
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe febe 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	486e      	ldr	r0, [pc, #440]	; (8002a1c <Disp+0xafc>)
 8002864:	2200      	movs	r2, #0
 8002866:	0019      	movs	r1, r3
 8002868:	f7fe feb7 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	486a      	ldr	r0, [pc, #424]	; (8002a1c <Disp+0xafc>)
 8002872:	2200      	movs	r2, #0
 8002874:	0019      	movs	r1, r3
 8002876:	f7fe feb0 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	00d9      	lsls	r1, r3, #3
 800287e:	2390      	movs	r3, #144	; 0x90
 8002880:	05db      	lsls	r3, r3, #23
 8002882:	2200      	movs	r2, #0
 8002884:	0018      	movs	r0, r3
 8002886:	f7fe fea8 	bl	80015da <HAL_GPIO_WritePin>
			break;
 800288a:	e07d      	b.n	8002988 <Disp+0xa68>


			case 8 :

			Sifirla();
 800288c:	f7ff fb0e 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	00d9      	lsls	r1, r3, #3
 8002894:	2390      	movs	r3, #144	; 0x90
 8002896:	05db      	lsls	r3, r3, #23
 8002898:	2201      	movs	r2, #1
 800289a:	0018      	movs	r0, r3
 800289c:	f7fe fe9d 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <Disp+0xafc>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	2108      	movs	r1, #8
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7fe fe97 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80028ac:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <Disp+0xafc>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	2110      	movs	r1, #16
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fe fe91 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <Disp+0xafc>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	2120      	movs	r1, #32
 80028be:	0018      	movs	r0, r3
 80028c0:	f7fe fe8b 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <Disp+0xafc>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	0018      	movs	r0, r3
 80028cc:	f7fe fe85 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80028d0:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <Disp+0xafc>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7fe fe7f 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	484e      	ldr	r0, [pc, #312]	; (8002a1c <Disp+0xafc>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	0019      	movs	r1, r3
 80028e6:	f7fe fe78 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	484b      	ldr	r0, [pc, #300]	; (8002a1c <Disp+0xafc>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	0019      	movs	r1, r3
 80028f4:	f7fe fe71 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	00d9      	lsls	r1, r3, #3
 80028fc:	2390      	movs	r3, #144	; 0x90
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	2200      	movs	r2, #0
 8002902:	0018      	movs	r0, r3
 8002904:	f7fe fe69 	bl	80015da <HAL_GPIO_WritePin>
			break;
 8002908:	e03e      	b.n	8002988 <Disp+0xa68>


			case 9 :

			Sifirla();
 800290a:	f7ff facf 	bl	8001eac <Sifirla>
	          HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_SET);
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	00d9      	lsls	r1, r3, #3
 8002912:	2390      	movs	r3, #144	; 0x90
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	2201      	movs	r2, #1
 8002918:	0018      	movs	r0, r3
 800291a:	f7fe fe5e 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <Disp+0xafc>)
 8002920:	2201      	movs	r2, #1
 8002922:	2108      	movs	r1, #8
 8002924:	0018      	movs	r0, r3
 8002926:	f7fe fe58 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <Disp+0xafc>)
 800292c:	2201      	movs	r2, #1
 800292e:	2110      	movs	r1, #16
 8002930:	0018      	movs	r0, r3
 8002932:	f7fe fe52 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <Disp+0xafc>)
 8002938:	2201      	movs	r2, #1
 800293a:	2120      	movs	r1, #32
 800293c:	0018      	movs	r0, r3
 800293e:	f7fe fe4c 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <Disp+0xafc>)
 8002944:	2201      	movs	r2, #1
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	0018      	movs	r0, r3
 800294a:	f7fe fe46 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <Disp+0xafc>)
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	0018      	movs	r0, r3
 8002956:	f7fe fe40 	bl	80015da <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	482f      	ldr	r0, [pc, #188]	; (8002a1c <Disp+0xafc>)
 8002960:	2201      	movs	r2, #1
 8002962:	0019      	movs	r1, r3
 8002964:	f7fe fe39 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	482b      	ldr	r0, [pc, #172]	; (8002a1c <Disp+0xafc>)
 800296e:	2201      	movs	r2, #1
 8002970:	0019      	movs	r1, r3
 8002972:	f7fe fe32 	bl	80015da <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(Onlar_GPIO_Port, Onlar_Pin , GPIO_PIN_RESET);
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	00d9      	lsls	r1, r3, #3
 800297a:	2390      	movs	r3, #144	; 0x90
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	2200      	movs	r2, #0
 8002980:	0018      	movs	r0, r3
 8002982:	f7fe fe2a 	bl	80015da <HAL_GPIO_WritePin>
			break;
 8002986:	46c0      	nop			; (mov r8, r8)


		//////////XXXXXXXXXXXXXX//YUZLER//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//YUZLER//XXXXXXXXXXXXX////////////////////////////XXXXXXXXXXXXXX//YUZLER//XXXXXXXXXXXXX//////////////////


			switch(yuzler){
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b09      	cmp	r3, #9
 800298c:	d900      	bls.n	8002990 <Disp+0xa70>
 800298e:	e282      	b.n	8002e96 <Disp+0xf76>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <Disp+0xb00>)
 8002996:	18d3      	adds	r3, r2, r3
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	469f      	mov	pc, r3



				case 0 :
				                      //0
				Sifirla();
 800299c:	f7ff fa86 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	2390      	movs	r3, #144	; 0x90
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	2201      	movs	r2, #1
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fe fe15 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <Disp+0xafc>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	2108      	movs	r1, #8
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7fe fe0f 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80029bc:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <Disp+0xafc>)
 80029be:	2201      	movs	r2, #1
 80029c0:	2110      	movs	r1, #16
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7fe fe09 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80029c8:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <Disp+0xafc>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	2120      	movs	r1, #32
 80029ce:	0018      	movs	r0, r3
 80029d0:	f7fe fe03 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <Disp+0xafc>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	0018      	movs	r0, r3
 80029dc:	f7fe fdfd 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <Disp+0xafc>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7fe fdf7 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <Disp+0xafc>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	0019      	movs	r1, r3
 80029f6:	f7fe fdf0 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4807      	ldr	r0, [pc, #28]	; (8002a1c <Disp+0xafc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	0019      	movs	r1, r3
 8002a04:	f7fe fde9 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	2390      	movs	r3, #144	; 0x90
 8002a0e:	05db      	lsls	r3, r3, #23
 8002a10:	2200      	movs	r2, #0
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fe fde1 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002a18:	e23d      	b.n	8002e96 <Disp+0xf76>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	48000400 	.word	0x48000400
 8002a20:	08002f94 	.word	0x08002f94


				case 1 :

				Sifirla();
 8002a24:	f7ff fa42 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	0099      	lsls	r1, r3, #2
 8002a2c:	2390      	movs	r3, #144	; 0x90
 8002a2e:	05db      	lsls	r3, r3, #23
 8002a30:	2201      	movs	r2, #1
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7fe fdd1 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8002a38:	4bf6      	ldr	r3, [pc, #984]	; (8002e14 <Disp+0xef4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fe fdcb 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002a44:	4bf3      	ldr	r3, [pc, #972]	; (8002e14 <Disp+0xef4>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	2110      	movs	r1, #16
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7fe fdc5 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002a50:	4bf0      	ldr	r3, [pc, #960]	; (8002e14 <Disp+0xef4>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	2120      	movs	r1, #32
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7fe fdbf 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8002a5c:	4bed      	ldr	r3, [pc, #948]	; (8002e14 <Disp+0xef4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2140      	movs	r1, #64	; 0x40
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fdb9 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002a68:	4bea      	ldr	r3, [pc, #936]	; (8002e14 <Disp+0xef4>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7fe fdb3 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	48e6      	ldr	r0, [pc, #920]	; (8002e14 <Disp+0xef4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	f7fe fdac 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	48e3      	ldr	r0, [pc, #908]	; (8002e14 <Disp+0xef4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	f7fe fda5 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	0099      	lsls	r1, r3, #2
 8002a94:	2390      	movs	r3, #144	; 0x90
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	2200      	movs	r2, #0
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7fe fd9d 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002aa0:	e1f9      	b.n	8002e96 <Disp+0xf76>


				case 2 :

				Sifirla();
 8002aa2:	f7ff fa03 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	0099      	lsls	r1, r3, #2
 8002aaa:	2390      	movs	r3, #144	; 0x90
 8002aac:	05db      	lsls	r3, r3, #23
 8002aae:	2201      	movs	r2, #1
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fe fd92 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002ab6:	4bd7      	ldr	r3, [pc, #860]	; (8002e14 <Disp+0xef4>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2108      	movs	r1, #8
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fe fd8c 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002ac2:	4bd4      	ldr	r3, [pc, #848]	; (8002e14 <Disp+0xef4>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fe fd86 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8002ace:	4bd1      	ldr	r3, [pc, #836]	; (8002e14 <Disp+0xef4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fe fd80 	bl	80015da <HAL_GPIO_WritePin>
			 	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002ada:	4bce      	ldr	r3, [pc, #824]	; (8002e14 <Disp+0xef4>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7fe fd7a 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002ae6:	4bcb      	ldr	r3, [pc, #812]	; (8002e14 <Disp+0xef4>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7fe fd74 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	48c7      	ldr	r0, [pc, #796]	; (8002e14 <Disp+0xef4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	0019      	movs	r1, r3
 8002afc:	f7fe fd6d 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	48c3      	ldr	r0, [pc, #780]	; (8002e14 <Disp+0xef4>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	0019      	movs	r1, r3
 8002b0a:	f7fe fd66 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	0099      	lsls	r1, r3, #2
 8002b12:	2390      	movs	r3, #144	; 0x90
 8002b14:	05db      	lsls	r3, r3, #23
 8002b16:	2200      	movs	r2, #0
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fe fd5e 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002b1e:	e1ba      	b.n	8002e96 <Disp+0xf76>


				case 3 :

				Sifirla();
 8002b20:	f7ff f9c4 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	2390      	movs	r3, #144	; 0x90
 8002b2a:	05db      	lsls	r3, r3, #23
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7fe fd53 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002b34:	4bb7      	ldr	r3, [pc, #732]	; (8002e14 <Disp+0xef4>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	2108      	movs	r1, #8
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fe fd4d 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002b40:	4bb4      	ldr	r3, [pc, #720]	; (8002e14 <Disp+0xef4>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	2110      	movs	r1, #16
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7fe fd47 	bl	80015da <HAL_GPIO_WritePin>
		          HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002b4c:	4bb1      	ldr	r3, [pc, #708]	; (8002e14 <Disp+0xef4>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2120      	movs	r1, #32
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7fe fd41 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002b58:	4bae      	ldr	r3, [pc, #696]	; (8002e14 <Disp+0xef4>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2140      	movs	r1, #64	; 0x40
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fe fd3b 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002b64:	4bab      	ldr	r3, [pc, #684]	; (8002e14 <Disp+0xef4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fe fd35 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	48a7      	ldr	r0, [pc, #668]	; (8002e14 <Disp+0xef4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	0019      	movs	r1, r3
 8002b7a:	f7fe fd2e 	bl	80015da <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	48a4      	ldr	r0, [pc, #656]	; (8002e14 <Disp+0xef4>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	0019      	movs	r1, r3
 8002b88:	f7fe fd27 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	2390      	movs	r3, #144	; 0x90
 8002b92:	05db      	lsls	r3, r3, #23
 8002b94:	2200      	movs	r2, #0
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fe fd1f 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002b9c:	e17b      	b.n	8002e96 <Disp+0xf76>


				case 4 :

				Sifirla();
 8002b9e:	f7ff f985 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	0099      	lsls	r1, r3, #2
 8002ba6:	2390      	movs	r3, #144	; 0x90
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	2201      	movs	r2, #1
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7fe fd14 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8002bb2:	4b98      	ldr	r3, [pc, #608]	; (8002e14 <Disp+0xef4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2108      	movs	r1, #8
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fe fd0e 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002bbe:	4b95      	ldr	r3, [pc, #596]	; (8002e14 <Disp+0xef4>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fe fd08 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002bca:	4b92      	ldr	r3, [pc, #584]	; (8002e14 <Disp+0xef4>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2120      	movs	r1, #32
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fd02 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8002bd6:	4b8f      	ldr	r3, [pc, #572]	; (8002e14 <Disp+0xef4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fe fcfc 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002be2:	4b8c      	ldr	r3, [pc, #560]	; (8002e14 <Disp+0xef4>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fe fcf6 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4888      	ldr	r0, [pc, #544]	; (8002e14 <Disp+0xef4>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	f7fe fcef 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4884      	ldr	r0, [pc, #528]	; (8002e14 <Disp+0xef4>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	0019      	movs	r1, r3
 8002c06:	f7fe fce8 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	0099      	lsls	r1, r3, #2
 8002c0e:	2390      	movs	r3, #144	; 0x90
 8002c10:	05db      	lsls	r3, r3, #23
 8002c12:	2200      	movs	r2, #0
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fe fce0 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002c1a:	e13c      	b.n	8002e96 <Disp+0xf76>


				case 5 :

				Sifirla();
 8002c1c:	f7ff f946 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	0099      	lsls	r1, r3, #2
 8002c24:	2390      	movs	r3, #144	; 0x90
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	2201      	movs	r2, #1
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7fe fcd5 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002c30:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <Disp+0xef4>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	2108      	movs	r1, #8
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7fe fccf 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8002c3c:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <Disp+0xef4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2110      	movs	r1, #16
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7fe fcc9 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002c48:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <Disp+0xef4>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7fe fcc3 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <Disp+0xef4>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	2140      	movs	r1, #64	; 0x40
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fe fcbd 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002c60:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <Disp+0xef4>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fe fcb7 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4868      	ldr	r0, [pc, #416]	; (8002e14 <Disp+0xef4>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	0019      	movs	r1, r3
 8002c76:	f7fe fcb0 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4865      	ldr	r0, [pc, #404]	; (8002e14 <Disp+0xef4>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	0019      	movs	r1, r3
 8002c84:	f7fe fca9 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	0099      	lsls	r1, r3, #2
 8002c8c:	2390      	movs	r3, #144	; 0x90
 8002c8e:	05db      	lsls	r3, r3, #23
 8002c90:	2200      	movs	r2, #0
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7fe fca1 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002c98:	e0fd      	b.n	8002e96 <Disp+0xf76>


				case 6 :

				Sifirla();
 8002c9a:	f7ff f907 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	0099      	lsls	r1, r3, #2
 8002ca2:	2390      	movs	r3, #144	; 0x90
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fc96 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002cae:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <Disp+0xef4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fe fc90 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <Disp+0xef4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fe fc8a 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002cc6:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <Disp+0xef4>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2120      	movs	r1, #32
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fe fc84 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <Disp+0xef4>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe fc7e 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002cde:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <Disp+0xef4>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fe fc78 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4849      	ldr	r0, [pc, #292]	; (8002e14 <Disp+0xef4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	f7fe fc71 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4845      	ldr	r0, [pc, #276]	; (8002e14 <Disp+0xef4>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	0019      	movs	r1, r3
 8002d02:	f7fe fc6a 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	0099      	lsls	r1, r3, #2
 8002d0a:	2390      	movs	r3, #144	; 0x90
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	2200      	movs	r2, #0
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fe fc62 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002d16:	e0be      	b.n	8002e96 <Disp+0xf76>


				case 7 :

				Sifirla();
 8002d18:	f7ff f8c8 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	0099      	lsls	r1, r3, #2
 8002d20:	2390      	movs	r3, #144	; 0x90
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	2201      	movs	r2, #1
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7fe fc57 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002d2c:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <Disp+0xef4>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2108      	movs	r1, #8
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7fe fc51 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <Disp+0xef4>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f7fe fc4b 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <Disp+0xef4>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	2120      	movs	r1, #32
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7fe fc45 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8002d50:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <Disp+0xef4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fe fc3f 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002d5c:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <Disp+0xef4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fe fc39 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4829      	ldr	r0, [pc, #164]	; (8002e14 <Disp+0xef4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	0019      	movs	r1, r3
 8002d72:	f7fe fc32 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4826      	ldr	r0, [pc, #152]	; (8002e14 <Disp+0xef4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	0019      	movs	r1, r3
 8002d80:	f7fe fc2b 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	0099      	lsls	r1, r3, #2
 8002d88:	2390      	movs	r3, #144	; 0x90
 8002d8a:	05db      	lsls	r3, r3, #23
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7fe fc23 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002d94:	e07f      	b.n	8002e96 <Disp+0xf76>


				case 8 :

				Sifirla();
 8002d96:	f7ff f889 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	0099      	lsls	r1, r3, #2
 8002d9e:	2390      	movs	r3, #144	; 0x90
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	2201      	movs	r2, #1
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7fe fc18 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <Disp+0xef4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	2108      	movs	r1, #8
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fe fc12 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <Disp+0xef4>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	2110      	movs	r1, #16
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7fe fc0c 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <Disp+0xef4>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7fe fc06 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <Disp+0xef4>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fe fc00 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <Disp+0xef4>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7fe fbfa 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	480a      	ldr	r0, [pc, #40]	; (8002e14 <Disp+0xef4>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	0019      	movs	r1, r3
 8002df0:	f7fe fbf3 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4806      	ldr	r0, [pc, #24]	; (8002e14 <Disp+0xef4>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	f7fe fbec 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	0099      	lsls	r1, r3, #2
 8002e06:	2390      	movs	r3, #144	; 0x90
 8002e08:	05db      	lsls	r3, r3, #23
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7fe fbe4 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002e12:	e040      	b.n	8002e96 <Disp+0xf76>
 8002e14:	48000400 	.word	0x48000400


				case 9 :

				Sifirla();
 8002e18:	f7ff f848 	bl	8001eac <Sifirla>
			      HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_SET);
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	2390      	movs	r3, #144	; 0x90
 8002e22:	05db      	lsls	r3, r3, #23
 8002e24:	2201      	movs	r2, #1
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fe fbd7 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <Disp+0xf80>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	2108      	movs	r1, #8
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fe fbd1 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <Disp+0xf80>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7fe fbcb 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <Disp+0xf80>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	2120      	movs	r1, #32
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7fe fbc5 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <Disp+0xf80>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	2140      	movs	r1, #64	; 0x40
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fe fbbf 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <Disp+0xf80>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7fe fbb9 	bl	80015da <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <Disp+0xf80>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	0019      	movs	r1, r3
 8002e72:	f7fe fbb2 	bl	80015da <HAL_GPIO_WritePin>
			      HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4809      	ldr	r0, [pc, #36]	; (8002ea0 <Disp+0xf80>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	0019      	movs	r1, r3
 8002e80:	f7fe fbab 	bl	80015da <HAL_GPIO_WritePin>
		     	  HAL_GPIO_WritePin(Yuzler_GPIO_Port, Yuzler_Pin , GPIO_PIN_RESET);
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	2390      	movs	r3, #144	; 0x90
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7fe fba3 	bl	80015da <HAL_GPIO_WritePin>
				break;
 8002e94:	46c0      	nop			; (mov r8, r8)





}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b006      	add	sp, #24
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	48000400 	.word	0x48000400

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	f000 f821 	bl	8002efc <_init>
 8002eba:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	00b3      	lsls	r3, r6, #2
 8002eca:	58eb      	ldr	r3, [r5, r3]
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	00b3      	lsls	r3, r6, #2
 8002ed4:	58eb      	ldr	r3, [r5, r3]
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002fbc 	.word	0x08002fbc
 8002ee0:	08002fbc 	.word	0x08002fbc
 8002ee4:	08002fbc 	.word	0x08002fbc
 8002ee8:	08002fc0 	.word	0x08002fc0

08002eec <memset>:
 8002eec:	0003      	movs	r3, r0
 8002eee:	1882      	adds	r2, r0, r2
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	7019      	strb	r1, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
